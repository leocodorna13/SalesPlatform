---
import Layout from '../../layouts/Layout.astro';
import SearchBar from '../../components/SearchBar.astro';
import CategoryFilter from '../../components/CategoryFilter.astro';
import ProductCard from '../../components/ProductCard.astro';
import { supabase } from '../../services/supabase';
import type { Product, Category } from '../../types';

// Buscar produtos e categorias
const { data: productsData } = await supabase
  .from('products')
  .select(`
    *,
    category:categories (
      id,
      name,
      slug
    ),
    product_images (
      id,
      image_url,
      is_primary
    )
  `)
  .order('created_at', { ascending: false });

const { data: categories } = await supabase
  .from('categories')
  .select('*')
  .order('name');

const currentCategory = 'all';

// Processar os produtos para garantir que image_url está correto
const products = (productsData || []).map(product => {
  // Se o produto tem imagens, usar a primeira imagem como image_url
  if (product.product_images && product.product_images.length > 0) {
    // Tentar encontrar a imagem primária primeiro
    const primaryImage = product.product_images.find(img => img.is_primary);
    product.image_url = primaryImage ? primaryImage.image_url : product.product_images[0].image_url;
  }
  return product;
}) as Product[];

const typedCategories = (categories || []) as Category[];
---

<Layout title="Todos os Produtos">
  <div class="container mx-auto px-4 py-8">
    <!-- Barra de pesquisa com categorias -->
    <div class="mb-8">
      <SearchBar 
        placeholder="Busque por nome, preço ou categoria..." 
        categories={typedCategories}
        mobileFriendly={true}
      />
    </div>

    <!-- Grid de produtos -->
    <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {products.map((product) => (
        <div 
          class="product-card transition-all duration-300 ease-in-out transform hover:scale-[1.02]" 
          data-title={product.title.toLowerCase()}
          data-price={product.price.toString()}
          data-category={product.category?.slug || ''}
          data-category-name={(product.category?.name || '').toLowerCase()}
        >
          <ProductCard product={product} />
        </div>
      ))}
    </div>

    <!-- Estado vazio -->
    <div id="emptyState" class="hidden text-center py-16">
      <div class="max-w-md mx-auto">
        <i class="fas fa-search text-4xl text-neutral-300 mb-4"></i>
        <h3 class="text-xl font-medium text-neutral-700 mb-2">Nenhum produto encontrado</h3>
        <p class="text-neutral-500">
          Tente ajustar seus filtros ou buscar por outros termos
        </p>
      </div>
    </div>
  </div>
</Layout>

<style>
  .product-card {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.3s ease-out, transform 0.3s ease-out;
  }

  .product-card.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }

  #productsGrid {
    min-height: 200px;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .fade-in {
    animation: fadeIn 0.3s ease-out forwards;
  }
</style>

<script>
  interface SearchEvent extends Event {
    detail: {
      searchTerm: string;
      selectedCategory: string;
    }
  }

  // Função para normalizar texto (remover acentos e converter para minúsculas)
  function normalizeText(text: string): string {
    return text.normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .toLowerCase()
      .trim();
  }

  // Função para verificar se um produto corresponde aos critérios de busca
  function matchesSearchCriteria(
    productCard: HTMLElement,
    searchTerm: string,
    selectedCategory: string
  ): boolean {
    const title = normalizeText(productCard.dataset.title || '');
    const price = normalizeText(productCard.dataset.price || '');
    const category = productCard.dataset.category || '';
    const categoryName = normalizeText(productCard.dataset.categoryName || '');
    
    const normalizedSearch = normalizeText(searchTerm);
    
    const matchesCategory = selectedCategory === 'all' || category === selectedCategory;
    const matchesSearch = !normalizedSearch || 
      title.includes(normalizedSearch) || 
      price.includes(normalizedSearch) ||
      categoryName.includes(normalizedSearch);

    return matchesCategory && matchesSearch;
  }

  // Função para atualizar a visibilidade dos produtos
  function updateProductsVisibility(searchTerm: string = '', selectedCategory: string = 'all'): void {
    const productsGrid = document.getElementById('productsGrid');
    const emptyState = document.getElementById('emptyState');
    const productCards = document.querySelectorAll<HTMLElement>('.product-card');
    
    if (!productsGrid || !emptyState) return;
    
    let visibleCount = 0;
    
    productCards.forEach(card => {
      if (matchesSearchCriteria(card, searchTerm, selectedCategory)) {
        card.classList.remove('hidden');
        card.classList.add('fade-in');
        visibleCount++;
      } else {
        card.classList.add('hidden');
        card.classList.remove('fade-in');
      }
    });

    // Mostrar/esconder estado vazio
    if (visibleCount === 0) {
      productsGrid.classList.add('hidden');
      emptyState.classList.remove('hidden');
      emptyState.classList.add('fade-in');
    } else {
      productsGrid.classList.remove('hidden');
      emptyState.classList.add('hidden');
      emptyState.classList.remove('fade-in');
    }

    // Reordenar os cards visíveis para ficarem agrupados
    const sortedCards = Array.from(productCards)
      .filter(card => !card.classList.contains('hidden'))
      .sort((a, b) => {
        const titleA = normalizeText(a.dataset.title || '');
        const titleB = normalizeText(b.dataset.title || '');
        return titleA.localeCompare(titleB);
      });

    sortedCards.forEach(card => productsGrid.appendChild(card));
  }

  // Observar mudanças nos eventos de busca
  document.addEventListener('searchUpdate', ((event: SearchEvent) => {
    const { searchTerm, selectedCategory } = event.detail;
    updateProductsVisibility(searchTerm, selectedCategory);
  }) as EventListener);

  // Inicializar a visibilidade dos produtos
  updateProductsVisibility();
</script>

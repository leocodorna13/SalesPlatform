---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getSiteSettings, getCurrentUser, supabase } from '../../services/supabase';

// Definir interface para as configurações do site
interface SiteSettings {
  id?: string | number | null;
  projectName: string;
  heroTitle: string;
  heroDescription: string;
  contactPhone: string;
  contactWhatsapp: string;
  paymentMethods: string;
  whatsappMessage: string;
  heroImageUrl?: string;
  [key: string]: any;
}

// Verificar se o usuário está autenticado
const user = await getCurrentUser();
if (!user) {
  return Astro.redirect('/admin/login');
}

// Buscar configurações atuais
const settingsData = await getSiteSettings();
const settings: SiteSettings = settingsData || {
  projectName: 'Desapego dos Martins',
  heroTitle: 'Desapego dos Martins',
  heroDescription: 'Produtos de qualidade a preços acessíveis',
  contactPhone: '',
  contactWhatsapp: '',
  paymentMethods: '',
  whatsappMessage: 'Olá! Vi seu produto no site e tenho interesse.',
  heroImageUrl: ''
};

// Processar formulário principal
let result: { success: boolean; message: string } = { success: false, message: '' };
let heroImageResult: { success: boolean; message: string } = { success: false, message: '' };

if (Astro.request.method === 'POST') {
  const formType = Astro.request.headers.get('X-Form-Type');
  
  try {
    const formData = await Astro.request.formData();
    
    if (formType === 'hero-image') {
      // Upload da imagem do hero
      const heroImage = formData.get('heroImage') as File;
      if (heroImage?.size > 0) {
        const { data, error } = await supabase.storage
          .from('siteimages')
          .upload(`hero/${Date.now()}-${heroImage.name}`, heroImage, {
            cacheControl: '3600',
            upsert: false
          });

        if (error) throw error;

        // Obter URL pública
        const { data: urlData } = supabase.storage
          .from('siteimages')
          .getPublicUrl(data.path);

        // Atualizar URL na tabela site_settings
        const { error: updateError } = await supabase
          .from('site_settings')
          .update({ heroImageUrl: urlData.publicUrl })
          .eq('id', 1);

        if (updateError) throw updateError;
        heroImageResult = { success: true, message: 'Imagem do hero atualizada com sucesso!' };
      }
    } else {
      // Atualização das configurações gerais
      const updatedSettings: SiteSettings = {
        projectName: formData.get('projectName')?.toString() || '',
        heroTitle: formData.get('heroTitle')?.toString() || '',
        heroDescription: formData.get('heroDescription')?.toString() || '',
        contactPhone: formData.get('contactPhone')?.toString() || '',
        contactWhatsapp: formData.get('contactWhatsapp')?.toString() || '',
        paymentMethods: formData.get('paymentMethods')?.toString() || '',
        whatsappMessage: formData.get('whatsappMessage')?.toString() || ''
      };
      
      const { error } = await supabase
        .from('site_settings')
        .update(updatedSettings)
        .eq('id', 1);

      if (error) throw error;
      result = { success: true, message: 'Configurações atualizadas com sucesso!' };
    }
  } catch (error: any) {
    console.error('Erro ao processar formulário:', error);
    if (formType === 'hero-image') {
      heroImageResult = {
        success: false,
        message: `Erro ao atualizar imagem do hero: ${error.message}`
      };
    } else {
      result = {
        success: false,
        message: `Erro ao atualizar configurações: ${error.message}`
      };
    }
  }
}

---

<AdminLayout title="Configurações do Site">
  <div class="max-w-4xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold text-gray-900 mb-6">Configurações do Site</h1>
    
    {result.message && (
      <div class={`p-4 mb-6 rounded-md ${result.success ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
        <p>{result.message}</p>
      </div>
    )}

    {heroImageResult.message && (
      <div class={`p-4 mb-6 rounded-md ${heroImageResult.success ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
        <p>{heroImageResult.message}</p>
      </div>
    )}
    
    <!-- Formulário de Upload da Imagem do Hero -->
    <div class="bg-white shadow rounded-lg p-6 mb-8">
      <h2 class="text-lg font-medium text-gray-900 mb-4">Imagem do Hero</h2>
      <form method="POST" enctype="multipart/form-data" id="heroImageForm">
        <input type="hidden" name="_method" value="PATCH">
        <input type="hidden" name="X-Form-Type" value="hero-image">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Imagem atual do hero
            </label>
            {settings.heroImageUrl && (
              <img src={settings.heroImageUrl} alt="Hero atual" class="w-full max-h-48 object-cover rounded-lg mb-4">
            )}
          </div>
          <div>
            <label for="heroImage" class="block text-sm font-medium text-gray-700 mb-2">
              Nova imagem
            </label>
            <input
              type="file"
              id="heroImage"
              name="heroImage"
              accept="image/*"
              class="block w-full text-sm text-gray-500
                file:mr-4 file:py-2 file:px-4
                file:rounded-full file:border-0
                file:text-sm file:font-semibold
                file:bg-primary-50 file:text-primary-700
                hover:file:bg-primary-100"
            />
          </div>
          <div class="flex justify-end">
            <button
              type="submit"
              class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              Atualizar Imagem
            </button>
          </div>
        </div>
      </form>
    </div>

    <!-- Formulário Principal -->
    <form method="POST" class="space-y-8">
      <!-- Seção: Informações Gerais -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 mb-4">Informações Gerais</h2>
        
        <div class="space-y-6">
          <!-- Nome do Projeto -->
          <div>
            <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">
              Nome do Projeto
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este nome será exibido no título das páginas e no rodapé do site.
            </div>
            <input
              type="text"
              id="projectName"
              name="projectName"
              value={settings.projectName}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Título do Hero -->
          <div>
            <label for="heroTitle" class="block text-sm font-medium text-gray-700 mb-1">
              Título Principal
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este título será exibido em destaque na página inicial.
            </div>
            <input
              type="text"
              id="heroTitle"
              name="heroTitle"
              value={settings.heroTitle}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Descrição do Hero -->
          <div>
            <label for="heroDescription" class="block text-sm font-medium text-gray-700 mb-1">
              Descrição Principal
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Esta descrição será exibida abaixo do título principal na página inicial.
            </div>
            <textarea
              id="heroDescription"
              name="heroDescription"
              rows="3"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.heroDescription}</textarea>
          </div>
        </div>
      </div>
      
      <!-- Seção: Informações de Contato -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 mb-4">Informações de Contato</h2>
        
        <div class="space-y-6">
          <!-- Telefone -->
          <div>
            <label for="contactPhone" class="block text-sm font-medium text-gray-700 mb-1">
              Telefone de Contato
            </label>
            <input
              type="tel"
              id="contactPhone"
              name="contactPhone"
              value={settings.contactPhone}
              placeholder="(00) 0000-0000"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- WhatsApp -->
          <div>
            <label for="contactWhatsapp" class="block text-sm font-medium text-gray-700 mb-1">
              WhatsApp
            </label>
            <input
              type="tel"
              id="contactWhatsapp"
              name="contactWhatsapp"
              value={settings.contactWhatsapp}
              placeholder="(00) 00000-0000"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Mensagem padrão do WhatsApp -->
          <div>
            <label for="whatsappMessage" class="block text-sm font-medium text-gray-700 mb-1">
              Mensagem Padrão do WhatsApp
            </label>
            <textarea
              id="whatsappMessage"
              name="whatsappMessage"
              rows="2"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.whatsappMessage}</textarea>
          </div>
          
          <!-- Formas de Pagamento -->
          <div>
            <label for="paymentMethods" class="block text-sm font-medium text-gray-700 mb-1">
              Formas de Pagamento Aceitas
            </label>
            <textarea
              id="paymentMethods"
              name="paymentMethods"
              rows="2"
              placeholder="Pix, Transferência, Cartão de Crédito, etc."
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.paymentMethods}</textarea>
          </div>
        </div>
      </div>
      
      <!-- Botões de ação -->
      <div class="flex justify-end space-x-3">
        <a href="/admin" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
          Cancelar
        </a>
        <button
          type="submit"
          class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Salvar Configurações
        </button>
      </div>
    </form>
  </div>
</AdminLayout>

<script>
  // Script para enviar o header X-Form-Type no formulário de imagem
  document.getElementById('heroImageForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);

    try {
      const response = await fetch(form.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Form-Type': 'hero-image'
        }
      });

      if (!response.ok) throw new Error('Erro ao enviar formulário');
      
      // Recarregar a página para mostrar as atualizações
      window.location.reload();
    } catch (error) {
      console.error('Erro:', error);
    }
  });
</script>

<script>
  import { supabase } from '../../services/supabase';

  // Upload de imagens
  const fileInput = document.getElementById('heroImages') as HTMLInputElement;
  const uploadButton = document.getElementById('uploadButton');

  // Botões de exclusão
  document.querySelectorAll('[data-filename]').forEach(button => {
    button.addEventListener('click', async () => {
      const filename = button.getAttribute('data-filename');
      if (!filename) return;

      try {
        const { error } = await supabase.storage
          .from('siteimages')
          .remove([`hero/${filename}`]);

        if (error) throw error;
        
        // Remover o elemento da imagem
        button.closest('.relative')?.remove();
      } catch (error) {
        console.error('Erro ao excluir:', error);
      }
    });
  });

  // Upload de novas imagens
  uploadButton?.addEventListener('click', async () => {
    const files = fileInput.files;
    if (!files?.length) return;

    try {
      for (const file of files) {
        const filename = `hero/${Date.now()}-${file.name}`;
        console.log('Fazendo upload:', filename);
        
        const { error } = await supabase.storage
          .from('siteimages')
          .upload(filename, file);

        if (error) {
          console.error('Erro no upload:', error);
          throw error;
        }
      }
      
      // Recarregar a página
      window.location.reload();
    } catch (error) {
      console.error('Erro:', error);
    }
  });
</script>

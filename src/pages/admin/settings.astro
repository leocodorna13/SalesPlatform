---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getSiteSettings, updateSiteSettings, getCurrentUser } from '../../services/supabase';

// Definir interface para as configurações do site
// Garantir que esta interface seja compatível com a definida em supabase.js
interface SiteSettings {
  id?: number | null;
  projectName: string;
  heroTitle: string;
  heroDescription: string;
  heroImageUrl: string;
  heroCarouselUrls?: string; // JSON string de URLs
  contactPhone: string;
  contactWhatsapp: string;
  paymentMethods: string;
  whatsappMessage: string;
  [key: string]: any; // Para permitir propriedades adicionais
}

// Verificar se o usuário está autenticado
const user = await getCurrentUser();
if (!user) {
  return Astro.redirect('/admin/login');
}

// Buscar configurações atuais
const settingsData = await getSiteSettings();
const settings: SiteSettings = settingsData || {
  projectName: 'Desapego dos Martins',
  heroTitle: 'Desapego dos Martins',
  heroDescription: 'Produtos de qualidade a preços acessíveis',
  heroImageUrl: '',
  heroCarouselUrls: '[]',
  contactPhone: '',
  contactWhatsapp: '',
  paymentMethods: '',
  whatsappMessage: 'Olá! Vi seu produto no site e tenho interesse.'
};

// Processar formulário
let result: { success: boolean; message: string } = { success: false, message: '' };

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    
    // Extrair dados do formulário
    const updatedSettings: SiteSettings = {
      projectName: formData.get('projectName')?.toString() || '',
      heroTitle: formData.get('heroTitle')?.toString() || '',
      heroDescription: formData.get('heroDescription')?.toString() || '',
      heroImageUrl: formData.get('heroImageUrl')?.toString() || settings.heroImageUrl || '',
      heroCarouselUrls: settings.heroCarouselUrls || '[]',
      contactPhone: formData.get('contactPhone')?.toString() || '',
      contactWhatsapp: formData.get('contactWhatsapp')?.toString() || '',
      paymentMethods: formData.get('paymentMethods')?.toString() || '',
      whatsappMessage: formData.get('whatsappMessage')?.toString() || ''
    };
    
    // Verificar se há um arquivo de imagem principal
    const heroImageFile = formData.get('heroImageFile') as File;
    const hasImageFile = heroImageFile && heroImageFile.size > 0;
    
    // Verificar se há arquivos para o carrossel
    const heroCarouselFiles = formData.getAll('heroCarouselFiles') as File[];
    const hasCarouselFiles = heroCarouselFiles.length > 0 && heroCarouselFiles.some(file => file.size > 0);
    const validCarouselFiles = heroCarouselFiles.filter(file => file.size > 0);
    
    // Atualizar configurações
    result = await updateSiteSettings(
      updatedSettings, 
      hasImageFile ? heroImageFile : undefined, 
      hasCarouselFiles ? validCarouselFiles : undefined
    );
    
    if (result.success) {
      // Atualizar as configurações locais após o sucesso
      const updatedSettingsData = await getSiteSettings();
      if (updatedSettingsData) {
        Object.assign(settings, updatedSettingsData);
      }
    }
  } catch (error: any) {
    console.error('Erro ao processar formulário:', error);
    result = {
      success: false,
      message: `Erro ao processar formulário: ${error.message}`
    };
  }
}

// Converter heroCarouselUrls de string JSON para array
const carouselImages = settings.heroCarouselUrls ? JSON.parse(settings.heroCarouselUrls as string) : [];

---

<AdminLayout title="Configurações do Site">
  <div class="max-w-4xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold text-gray-900 mb-6">Configurações do Site</h1>
    
    {result.message && (
      <div class={`p-4 mb-6 rounded-md ${result.success ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
        {result.message}
      </div>
    )}
    
    <form method="POST" class="space-y-8" enctype="multipart/form-data">
      <!-- Seção: Informações Gerais -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 mb-4">Informações Gerais</h2>
        
        <div class="space-y-6">
          <!-- Nome do Projeto -->
          <div>
            <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">
              Nome do Projeto
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este nome será exibido no título das páginas e no rodapé do site.
            </div>
            <input
              type="text"
              id="projectName"
              name="projectName"
              value={settings.projectName}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Título do Hero -->
          <div>
            <label for="heroTitle" class="block text-sm font-medium text-gray-700 mb-1">
              Título Principal
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este título será exibido em destaque na página inicial.
            </div>
            <input
              type="text"
              id="heroTitle"
              name="heroTitle"
              value={settings.heroTitle}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Descrição do Hero -->
          <div>
            <label for="heroDescription" class="block text-sm font-medium text-gray-700 mb-1">
              Descrição Principal
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Esta descrição será exibida abaixo do título principal na página inicial.
            </div>
            <textarea
              id="heroDescription"
              name="heroDescription"
              rows="3"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.heroDescription}</textarea>
          </div>
          
          <!-- Imagem principal (para compatibilidade) -->
          <div class="mt-6">
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Imagem Principal (Legado)
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Esta opção é mantida para compatibilidade. Recomendamos usar o carrossel acima.
            </div>
            
            <!-- Preview da imagem atual -->
            {settings.heroImageUrl && (
              <div class="mb-3">
                <img 
                  src={settings.heroImageUrl} 
                  alt="Imagem de fundo atual" 
                  class="w-full max-w-md h-40 object-cover rounded-lg shadow-sm"
                />
              </div>
            )}
            
            <!-- Upload de nova imagem -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Fazer upload de nova imagem
                </label>
                <input
                  type="file"
                  id="heroImageFile"
                  name="heroImageFile"
                  accept="image/*"
                  class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary-50 file:text-primary-700 hover:file:bg-primary-100"
                />
              </div>
              
              <div>
                <label for="heroImageUrl" class="block text-sm font-medium text-gray-700 mb-1">
                  Ou use uma URL externa
                </label>
                <input
                  type="text"
                  id="heroImageUrl"
                  name="heroImageUrl"
                  value={settings.heroImageUrl}
                  placeholder="https://exemplo.com/imagem.jpg"
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                />
              </div>
            </div>
          </div>
          
          <!-- Imagens do Carrossel -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Imagens para o Carrossel
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Estas imagens serão exibidas em um carrossel na seção principal da página inicial.
            </div>
            
            <!-- Área de upload com drag and drop -->
            <div class="mt-3">
              <div 
                id="carouselDropzone" 
                class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:bg-gray-50 transition-colors cursor-pointer"
              >
                <div class="space-y-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  <div class="text-sm text-gray-600">
                    <label for="carousel-file-upload" class="relative cursor-pointer bg-white rounded-md font-medium text-primary-600 hover:text-primary-500 focus-within:outline-none">
                      <span>Arraste imagens aqui</span>
                      <span class="block mt-1">ou clique para selecionar</span>
                      <input 
                        id="carousel-file-upload" 
                        name="heroCarouselFiles" 
                        type="file" 
                        multiple 
                        accept="image/*"
                        class="sr-only" 
                      />
                    </label>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Preview das imagens selecionadas para upload -->
            <div id="carousel-preview" class="mt-4 hidden">
              <h4 class="text-sm font-medium text-gray-700 mb-2">Imagens selecionadas:</h4>
              <div id="carousel-preview-container" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3"></div>
            </div>
            
            <!-- Preview das imagens atuais do carrossel -->
            {carouselImages.length > 0 && (
              <div class="mt-6">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Imagens atuais do carrossel:</h4>
                <div id="carousel-current-images" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">
                  {carouselImages.map((imageUrl: string, index: number) => (
                    <div class="relative group">
                      <img 
                        src={imageUrl} 
                        alt={`Imagem do carrossel ${index + 1}`} 
                        class="w-full h-24 object-cover rounded-lg shadow-sm"
                      />
                      <button 
                        type="button"
                        data-image-url={imageUrl}
                        class="remove-carousel-image absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                        aria-label="Remover imagem"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Seção: Informações de Contato -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 mb-4">Informações de Contato</h2>
        
        <div class="space-y-6">
          <!-- Telefone de Contato -->
          <div>
            <label for="contactPhone" class="block text-sm font-medium text-gray-700 mb-1">
              Telefone de Contato
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este telefone será exibido no rodapé do site para contato.
            </div>
            <input
              type="text"
              id="contactPhone"
              name="contactPhone"
              value={settings.contactPhone}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- WhatsApp de Contato -->
          <div>
            <label for="contactWhatsapp" class="block text-sm font-medium text-gray-700 mb-1">
              WhatsApp de Contato
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este número será usado para o botão de WhatsApp no rodapé e nas páginas de produto.
              Formato: 5511999999999 (com código do país e DDD, sem espaços ou caracteres especiais)
            </div>
            <input
              type="text"
              id="contactWhatsapp"
              name="contactWhatsapp"
              value={settings.contactWhatsapp}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
        </div>
      </div>
      
      <!-- Seção: Configurações de Pagamento e Mensagens -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 mb-4">Pagamento e Mensagens</h2>
        
        <div class="space-y-6">
          <!-- Formas de Pagamento -->
          <div>
            <label for="paymentMethods" class="block text-sm font-medium text-gray-700 mb-1">
              Formas de Pagamento
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Estas formas de pagamento serão exibidas nas páginas de produto.
            </div>
            <textarea
              id="paymentMethods"
              name="paymentMethods"
              rows="3"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.paymentMethods}</textarea>
          </div>
          
          <!-- Mensagem de WhatsApp -->
          <div>
            <label for="whatsappMessage" class="block text-sm font-medium text-gray-700 mb-1">
              Mensagem Padrão do WhatsApp
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Esta mensagem será enviada quando um usuário clicar no botão de WhatsApp em um produto.
            </div>
            <textarea
              id="whatsappMessage"
              name="whatsappMessage"
              rows="3"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.whatsappMessage}</textarea>
          </div>
        </div>
      </div>
      
      <div class="flex justify-end">
        <button
          type="submit"
          class="inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Salvar Configurações
        </button>
      </div>
    </form>
  </div>
</AdminLayout>

<script>
  // Script para remover imagens do carrossel
  document.addEventListener('DOMContentLoaded', () => {
    // Configuração do dropzone para upload de imagens
    const dropzone = document.getElementById('carouselDropzone');
    const fileInput = document.getElementById('carousel-file-upload');
    const previewContainer = document.getElementById('carousel-preview');
    const previewGrid = document.getElementById('carousel-preview-container');
    const removeButtons = document.querySelectorAll('.remove-carousel-image');
    
    // Função para mostrar preview das imagens selecionadas
    const handleFiles = (files) => {
      if (files.length === 0) return;
      
      previewContainer.classList.remove('hidden');
      previewGrid.innerHTML = '';
      
      Array.from(files).forEach((file, index) => {
        // Criar elemento de preview
        const reader = new FileReader();
        reader.onload = (e) => {
          const preview = document.createElement('div');
          preview.className = 'relative group';
          preview.innerHTML = `
            <img 
              src="${e.target.result}" 
              alt="Preview ${index + 1}" 
              class="w-full h-24 object-cover rounded-lg shadow-sm"
              data-file-index="${index}"
            />
            <button 
              type="button"
              class="preview-remove-btn absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
              aria-label="Remover imagem"
              data-index="${index}"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          `;
          
          previewGrid.appendChild(preview);
          
          // Adicionar evento para remover preview
          const removeBtn = preview.querySelector('.preview-remove-btn');
          removeBtn.addEventListener('click', () => {
            preview.remove();
            
            // Se não houver mais previews, esconder o container
            if (previewGrid.children.length === 0) {
              previewContainer.classList.add('hidden');
            }
          });
        };
        
        reader.readAsDataURL(file);
      });
    };
    
    // Eventos do dropzone
    if (dropzone && fileInput) {
      // Evento de clique
      dropzone.addEventListener('click', () => {
        fileInput.click();
      });
      
      // Evento de mudança no input de arquivo
      fileInput.addEventListener('change', (e) => {
        handleFiles(e.target.files);
      });
      
      // Eventos de drag and drop
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropzone.addEventListener(eventName, (e) => {
          e.preventDefault();
          e.stopPropagation();
        }, false);
      });
      
      // Adicionar classe de highlight durante o drag
      ['dragenter', 'dragover'].forEach(eventName => {
        dropzone.addEventListener(eventName, () => {
          dropzone.classList.add('border-primary-500', 'bg-primary-50');
        }, false);
      });
      
      // Remover classe de highlight quando o drag terminar
      ['dragleave', 'drop'].forEach(eventName => {
        dropzone.addEventListener(eventName, () => {
          dropzone.classList.remove('border-primary-500', 'bg-primary-50');
        }, false);
      });
      
      // Processar arquivos quando forem soltos
      dropzone.addEventListener('drop', (e) => {
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files);
        
        // Atualizar o input de arquivo com os arquivos soltos
        if (files.length > 0) {
          fileInput.files = files;
        }
      }, false);
    }
    
    // Eventos para remover imagens existentes
    removeButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        const target = e.currentTarget as HTMLButtonElement;
        const imageUrl = target.dataset.imageUrl;
        
        if (!imageUrl) return;
        
        // Confirmar a remoção
        if (!confirm('Tem certeza que deseja remover esta imagem do carrossel?')) {
          return;
        }
        
        // Desabilitar o botão durante o processamento
        target.disabled = true;
        
        try {
          // Fazer requisição para remover a imagem
          const response = await fetch('/api/remove-carousel-image', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ imageUrl })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Remover o elemento da UI
            const imageContainer = target.closest('.relative');
            if (imageContainer) {
              imageContainer.remove();
            }
            
            // Mostrar mensagem de sucesso
            alert('Imagem removida com sucesso!');
          } else {
            alert(`Erro ao remover imagem: ${result.message}`);
            target.disabled = false;
          }
        } catch (error) {
          console.error('Erro ao processar remoção:', error);
          alert('Ocorreu um erro ao tentar remover a imagem.');
          target.disabled = false;
        }
      });
    });
  });
</script>

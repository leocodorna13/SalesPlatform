---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getSiteSettings, updateSiteSettings, getCurrentUser, getHeroImages, addHeroImage, deleteHeroImage, updateHeroImageOrder, supabase } from '../../services/supabase';

// Interface para as configurações
interface SiteSettings {
  projectName: string;
  heroTitle: string;
  heroDescription: string;
  contactPhone: string;
  contactWhatsapp: string;
  paymentMethods: string;
  whatsappMessage: string;
  [key: string]: any;
}

interface HeroImage {
  id: string;
  url: string;
  filename: string;
  order: number;
}

// Verificar autenticação
const user = await getCurrentUser();
if (!user) {
  return Astro.redirect('/admin/login');
}

// Buscar configurações e imagens
const settings = await getSiteSettings();
const heroImages: HeroImage[] = await getHeroImages();

// Processar formulários
let message = '';
let messageType = '';

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const formType = formData.get('X-Form-Type');

  if (formType === 'hero-image') {
    const file = formData.get('heroImage');
    if (file instanceof File) {
      const result = await addHeroImage(file);
      message = result.message;
      messageType = result.success ? 'success' : 'error';
    }
  } else if (formType === 'delete-hero-image') {
    const imageId = formData.get('imageId')?.toString();
    if (imageId) {
      const result = await deleteHeroImage(imageId);
      message = result.message;
      messageType = result.success ? 'success' : 'error';
    }
  } else if (formType === 'update-hero-order') {
    const orderData = formData.get('order')?.toString();
    if (orderData) {
      const images = JSON.parse(orderData);
      const result = await updateHeroImageOrder(images);
      message = result.message;
      messageType = result.success ? 'success' : 'error';
    }
  } else {
    const updatedSettings: SiteSettings = {
      projectName: formData.get('projectName')?.toString() || '',
      heroTitle: formData.get('heroTitle')?.toString() || '',
      heroDescription: formData.get('heroDescription')?.toString() || '',
      contactPhone: formData.get('contactPhone')?.toString() || '',
      contactWhatsapp: formData.get('contactWhatsapp')?.toString() || '',
      paymentMethods: formData.get('paymentMethods')?.toString() || '',
      whatsappMessage: formData.get('whatsappMessage')?.toString() || ''
    };
    
    const { error } = await supabase
      .from('site_settings')
      .update(updatedSettings)
      .eq('id', 1);

    if (error) throw error;
    message = 'Configurações atualizadas com sucesso!';
    messageType = 'success';
  }
}
---

<AdminLayout title="Configurações do Site">
  <div class="max-w-4xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold text-gray-900 mb-6">Configurações do Site</h1>
    
    {message && (
      <div class={`mb-4 p-4 rounded-md ${messageType === 'success' ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`}>
        {message}
      </div>
    )}
    
    <!-- Seção de imagem do Hero -->
    <div class="bg-white shadow rounded-lg p-6 mb-8">
      <h2 class="text-lg font-medium text-gray-900 mb-4">Imagens do Hero</h2>
      
      <!-- Imagens atuais -->
      {heroImages.length > 0 && (
        <div class="mb-6">
          <h3 class="text-md font-medium text-gray-700 mb-3">Imagens Atuais</h3>
          <div class="space-y-4">
            {heroImages.map((image) => (
              <div class="flex items-center space-x-4 p-3 border rounded-lg" data-image-id={image.id}>
                <div class="flex-shrink-0">
                  <img 
                    src={image.url} 
                    alt="Hero image" 
                    class="w-24 h-16 object-cover rounded-md"
                  />
                </div>
                <div class="flex-grow">
                  <p class="text-sm text-gray-500 truncate">{image.filename || 'Imagem do Hero'}</p>
                </div>
                <div class="flex-shrink-0 flex space-x-3 md:space-x-2">
                  <button 
                    type="button" 
                    class="move-up-btn p-2 md:p-1 text-gray-500 hover:text-gray-700"
                    title="Mover para cima"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 md:h-5 md:w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                  </button>
                  <button 
                    type="button" 
                    class="move-down-btn p-2 md:p-1 text-gray-500 hover:text-gray-700"
                    title="Mover para baixo"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 md:h-5 md:w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </button>
                  <form method="POST" class="inline">
                    <input type="hidden" name="X-Form-Type" value="delete-hero-image" />
                    <input type="hidden" name="imageId" value={image.id} />
                    <button
                      type="submit"
                      class="p-2 md:p-1 text-red-500 hover:text-red-700"
                      title="Remover imagem"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 md:h-5 md:w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                      </svg>
                    </button>
                  </form>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      <!-- Formulário de upload -->
      <form method="POST" enctype="multipart/form-data" id="heroImageForm">
        <input type="hidden" name="X-Form-Type" value="hero-image" />
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Adicionar nova imagem
            </label>
            <input 
              type="file" 
              name="heroImage" 
              accept="image/*"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>
          <button
            type="submit"
            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Adicionar Imagem
          </button>
        </div>
      </form>
    </div>
    
    <!-- Formulário Principal -->
    <form method="POST" class="space-y-8">
      <!-- Seção: Informações Gerais -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 mb-4">Informações Gerais</h2>
        
        <div class="space-y-6">
          <!-- Nome do Projeto -->
          <div>
            <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">
              Nome do Projeto
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este nome será exibido no título das páginas e no rodapé do site.
            </div>
            <input
              type="text"
              id="projectName"
              name="projectName"
              value={settings.projectName}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Título do Hero -->
          <div>
            <label for="heroTitle" class="block text-sm font-medium text-gray-700 mb-1">
              Título Principal
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Este título será exibido em destaque na página inicial.
            </div>
            <input
              type="text"
              id="heroTitle"
              name="heroTitle"
              value={settings.heroTitle}
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Descrição do Hero -->
          <div>
            <label for="heroDescription" class="block text-sm font-medium text-gray-700 mb-1">
              Descrição Principal
            </label>
            <div class="text-xs text-gray-500 mb-2">
              Esta descrição será exibida abaixo do título principal na página inicial.
            </div>
            <textarea
              id="heroDescription"
              name="heroDescription"
              rows="3"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.heroDescription}</textarea>
          </div>
        </div>
      </div>
      
      <!-- Seção: Informações de Contato -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 mb-4">Informações de Contato</h2>
        
        <div class="space-y-6">
          <!-- Telefone -->
          <div>
            <label for="contactPhone" class="block text-sm font-medium text-gray-700 mb-1">
              Telefone de Contato
            </label>
            <input
              type="tel"
              id="contactPhone"
              name="contactPhone"
              value={settings.contactPhone}
              placeholder="(00) 0000-0000"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- WhatsApp -->
          <div>
            <label for="contactWhatsapp" class="block text-sm font-medium text-gray-700 mb-1">
              WhatsApp
            </label>
            <input
              type="tel"
              id="contactWhatsapp"
              name="contactWhatsapp"
              value={settings.contactWhatsapp}
              placeholder="(00) 00000-0000"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            />
          </div>
          
          <!-- Mensagem padrão do WhatsApp -->
          <div>
            <label for="whatsappMessage" class="block text-sm font-medium text-gray-700 mb-1">
              Mensagem Padrão do WhatsApp
            </label>
            <textarea
              id="whatsappMessage"
              name="whatsappMessage"
              rows="2"
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.whatsappMessage}</textarea>
          </div>
          
          <!-- Formas de Pagamento -->
          <div>
            <label for="paymentMethods" class="block text-sm font-medium text-gray-700 mb-1">
              Formas de Pagamento Aceitas
            </label>
            <textarea
              id="paymentMethods"
              name="paymentMethods"
              rows="2"
              placeholder="Pix, Transferência, Cartão de Crédito, etc."
              class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
            >{settings.paymentMethods}</textarea>
          </div>
        </div>
      </div>
      
      <!-- Botões de ação -->
      <div class="flex justify-end space-x-3">
        <a href="/admin" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
          Cancelar
        </a>
        <button
          type="submit"
          class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Salvar Configurações
        </button>
      </div>
    </form>
  </div>
</AdminLayout>

<script>
  // Recarregar após qualquer submissão de formulário
  document.querySelectorAll('form').forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      
      await fetch(window.location.href, {
        method: 'POST',
        body: formData
      });
      
      window.location.reload();
    });
  });

  // Ordenação de imagens
  document.querySelectorAll('.move-up-btn, .move-down-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const item = btn.closest('[data-image-id]');
      const sibling = btn.classList.contains('move-up-btn') 
        ? item?.previousElementSibling 
        : item?.nextElementSibling;

      if (item && sibling) {
        item.parentNode?.insertBefore(
          btn.classList.contains('move-up-btn') ? item : sibling,
          btn.classList.contains('move-up-btn') ? sibling : item
        );

        // Atualizar ordem
        const formData = new FormData();
        formData.append('X-Form-Type', 'update-hero-order');
        formData.append('order', JSON.stringify(
          Array.from(document.querySelectorAll('[data-image-id]'))
            .map(el => ({ id: el.dataset.imageId }))
        ));
        
        fetch(window.location.href, { method: 'POST', body: formData })
          .then(() => window.location.reload());
      }
    });
  });
</script>

---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import ImageUploader from '../../../../components/ImageUploader.astro';
import { getProductById, getCategories, supabase } from '../../../../services/supabase';

interface Product {
  id: string;
  title: string;
  description: string;
  price: number;
  category_id: string;
  status: string;
  product_images?: Array<{
    image_url: string;
    is_primary: boolean;
  }>;
}

// Obter o ID do produto da URL
const { id } = Astro.params;
if (!id) throw new Error('ID não fornecido');

// Buscar detalhes do produto e categorias
const product = (await getProductById(id)) as Product;
const categories = await getCategories();

// Verificar se o produto existe
if (!product) {
  return Astro.redirect('/admin/produtos');
}

// Processar formulário
let success = false;
let error = null;

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    
    // Extrair dados do formulário
    const title = formData.get('title') as string;
    const description = formData.get('description') as string;
    const price = parseFloat(formData.get('price') as string);
    const category_id = formData.get('category_id') as string;
    
    // Atualizar o produto
    const { error: updateError } = await supabase
      .from('products')
      .update({
        title,
        description,
        price,
        category_id,
        updated_at: new Date().toISOString()
      })
      .eq('id', id);
    
    if (updateError) throw updateError;
    
    // Processar imagens
    const imageFiles = formData.getAll('images') as File[];
    // Verificar se há arquivos válidos
    const validFiles = imageFiles.filter(file => file instanceof File && file.size > 0);
    
    if (validFiles.length > 0) {
      // Upload das novas imagens
      for (let i = 0; i < validFiles.length; i++) {
        const file = validFiles[i];
        const fileExt = file.name.split('.').pop();
        const fileName = `${id}/${Date.now()}-${i}.${fileExt}`;
        const filePath = `products/${fileName}`;
        
        const { error: uploadError } = await supabase.storage
          .from('product-images')
          .upload(filePath, file);
        
        if (uploadError) continue;
        
        const { data: publicURL } = supabase.storage
          .from('product-images')
          .getPublicUrl(filePath);
        
        // Verificar se já existem imagens para este produto
        const { data: existingImages } = await supabase
          .from('product_images')
          .select('*')
          .eq('product_id', id);
        
        // Salvar referência da imagem
        await supabase
          .from('product_images')
          .insert([{
            product_id: id,
            image_url: publicURL.publicUrl,
            is_primary: existingImages && existingImages.length === 0 && i === 0 // Só é primária se for a primeira e não existirem outras
          }]);
      }
    }
    
    // Processar imagens a remover
    const imagesToRemove = formData.get('images_to_remove') as string;
    if (imagesToRemove) {
      const imagesToRemoveArray = JSON.parse(imagesToRemove);
      for (const imageUrl of imagesToRemoveArray) {
        // Remover da tabela product_images
        await supabase
          .from('product_images')
          .delete()
          .eq('image_url', imageUrl);
          
        // Extrair o caminho do arquivo da URL
        const filePathMatch = imageUrl.match(/\/product-images\/([^?]+)/);
        if (filePathMatch && filePathMatch[1]) {
          const filePath = filePathMatch[1];
          
          // Remover do bucket de armazenamento
          await supabase.storage
            .from('product-images')
            .remove([filePath]);
        }
      }
    }
    
    success = true;
  } catch (e) {
    console.error('Erro ao atualizar produto:', e);
    error = 'Ocorreu um erro ao atualizar o produto. Tente novamente.';
  }
}

// Formatar preço para o input
const formattedPrice = product.price.toString();
---

<AdminLayout title="Editar Produto">
  <div class="mb-6">
    <a href="/admin/produtos" class="text-primary-600 hover:text-primary-800 flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
      Voltar para lista de produtos
    </a>
  </div>

  {success ? (
    <div class="bg-white rounded-lg shadow-md p-6 text-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-green-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <h2 class="text-2xl font-semibold text-gray-900 mb-2">Produto atualizado com sucesso!</h2>
      <p class="text-gray-600 mb-6">
        As alterações foram salvas e já estão disponíveis para visualização no site.
      </p>
      <div class="flex justify-center space-x-4">
        <a href="/admin/produtos" class="btn btn-outline">
          Ver lista de produtos
        </a>
        <a href={`/produto/${id}`} class="btn btn-primary" target="_blank">
          Ver produto no site
        </a>
      </div>
    </div>
  ) : (
    <div class="bg-white rounded-lg shadow-md p-6">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-gray-900">Editar produto</h2>
        <div class="flex items-center">
          <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium mr-2 ${
            product.status === 'available' 
              ? 'bg-green-100 text-green-800' 
              : 'bg-red-100 text-red-800'
          }`}>
            {product.status === 'available' ? 'Disponível' : 'Vendido'}
          </span>
          <a 
            href={`/produto/${id}`} 
            class="text-primary-600 hover:text-primary-800 text-sm"
            target="_blank"
          >
            Ver no site
          </a>
        </div>
      </div>
      
      {error && (
        <div class="bg-red-100 border border-red-200 text-red-800 rounded-md p-4 mb-6">
          {error}
        </div>
      )}
      
      <form method="POST" enctype="multipart/form-data" class="space-y-6" id="product-form">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="title" class="label">Título do produto</label>
            <input 
              type="text" 
              id="title" 
              name="title" 
              required
              class="input"
              value={product.title}
            />
          </div>
          
          <div>
            <label for="price" class="label">Preço (R$)</label>
            <input 
              type="number" 
              id="price" 
              name="price" 
              required
              min="0"
              step="0.01"
              class="input"
              value={formattedPrice}
            />
          </div>
        </div>
        
        <div>
          <label for="category_id" class="label">Categoria</label>
          <select 
            id="category_id" 
            name="category_id" 
            required
            class="input"
          >
            {categories.map((category) => (
              <option 
                value={category.id}
                selected={category.id === product.category_id}
              >
                {category.name}
              </option>
            ))}
          </select>
        </div>
        
        <div>
          <label for="description" class="label">Descrição</label>
          <textarea 
            id="description" 
            name="description" 
            rows="4"
            class="input"
          >{product.description}</textarea>
        </div>
        
        <div>
          <div class="mb-2">
            <label class="label">Imagens atuais</label>
            <p class="text-sm text-gray-500 mb-2">
              Se adicionar novas imagens, as imagens atuais serão mantidas.
            </p>
          </div>
          
          <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-4">
            {product.product_images && product.product_images.map((image, index) => (
              <div class="relative group">
                <img 
                  src={image.image_url} 
                  alt={`${product.title} - Imagem ${index + 1}`}
                  class="w-full h-32 object-cover rounded-lg"
                />
                <button 
                  type="button" 
                  class="remove-image absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                  data-image-url={image.image_url}
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
                {image.is_primary && (
                  <div class="absolute bottom-2 right-2 bg-green-500 text-white rounded-full p-1">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
        
        <ImageUploader required={false} />
        
        <div class="flex justify-end space-x-3">
          <a href="/admin/produtos" class="btn btn-outline">
            Cancelar
          </a>
          <button type="submit" class="btn btn-primary">
            Salvar alterações
          </button>
        </div>
      </form>
    </div>
  )}
</AdminLayout>

<script>
  // Script para o botão de salvar alterações
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('product-form') as HTMLFormElement;
    if (!form) return;
    
    // Array para armazenar URLs de imagens a serem removidas
    const imagesToRemove: string[] = [];
    
    // Adicionar handlers para botões de remoção de imagem
    document.querySelectorAll('.remove-image').forEach((button: HTMLElement) => {
      button.addEventListener('click', function(this: HTMLElement) {
        const imageUrl = this.getAttribute('data-image-url');
        if (imageUrl) {
          // Adicionar URL à lista de imagens a remover
          imagesToRemove.push(imageUrl);
          
          // Remover visualmente o elemento pai (container da imagem)
          const imageContainer = this.closest('.relative');
          if (imageContainer) {
            imageContainer.remove();
          }
        }
      });
    });
    
    // Handler de submissão do formulário
    form.addEventListener('submit', function(this: HTMLFormElement, e: Event) {
      e.preventDefault();
      
      const formData = new FormData(this);
      
      // Adicionar lista de imagens a remover
      if (imagesToRemove.length > 0) {
        formData.append('images_to_remove', JSON.stringify(imagesToRemove));
      }
      
      // Adicionar as imagens do uploader, se disponível
      if ((window as any).getUploadedFiles && typeof (window as any).getUploadedFiles === 'function') {
        const files = (window as any).getUploadedFiles();
        if (files && files.length > 0) {
          // Adicionar cada arquivo ao FormData
          files.forEach((file: File) => {
            formData.append('images', file);
          });
        }
      }
      
      // Enviar o formulário via fetch
      fetch(window.location.href, {
        method: 'POST',
        body: formData
      })
      .then(() => {
        window.location.reload();
      });
    });
  });
</script>

---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getProducts, updateProductStatus, deleteProduct, testImageUpload, getCurrentUser } from '../../services/supabase';

// Verificar autenticação primeiro
const user = await getCurrentUser();
if (!user) {
  return Astro.redirect('/admin/login?redirect=' + encodeURIComponent(Astro.url.pathname));
}

// Interface para imagem do produto
interface ProductImage {
  image_url: string;
  is_primary: boolean;
}

// Processar ações do formulário
let message = '';
let messageType = '';
let actionResult = null;

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const action = formData.get('action')?.toString();
    const productId = formData.get('productId')?.toString();
    
    console.log(`Processando ação: ${action} para produto: ${productId}`);
    
    if (action === 'mark-sold' && productId) {
      actionResult = await updateProductStatus(productId, 'sold');
      message = actionResult 
        ? 'Produto marcado como vendido com sucesso!' 
        : 'Falha ao marcar produto como vendido. Verifique o console para mais detalhes.';
      messageType = actionResult ? 'success' : 'error';
    } else if (action === 'mark-available' && productId) {
      actionResult = await updateProductStatus(productId, 'available');
      message = actionResult 
        ? 'Produto marcado como disponível com sucesso!' 
        : 'Falha ao marcar produto como disponível. Verifique o console para mais detalhes.';
      messageType = actionResult ? 'success' : 'error';
    } else if (action === 'delete' && productId) {
      actionResult = await deleteProduct(productId);
      message = actionResult 
        ? 'Produto excluído com sucesso!' 
        : 'Falha ao excluir produto. Verifique o console para mais detalhes.';
      messageType = actionResult ? 'success' : 'error';
    } else if (action === 'test-upload') {
      // Testar upload de imagem
      const result = await testImageUpload();
      
      if (result && typeof result === 'object') {
        const success = 'success' in result ? result.success : false;
        const errorDetails = 'error' in result ? result.error : null;
        
        message = success 
          ? 'Teste de upload concluído com sucesso! O sistema de armazenamento de imagens está funcionando corretamente.'
          : `Erro no teste de upload: ${errorDetails ? (typeof errorDetails === 'string' ? errorDetails : JSON.stringify(errorDetails)) : 'Erro desconhecido'}`;
        messageType = success ? 'success' : 'error';
      } else {
        message = 'Resultado do teste de upload inválido';
        messageType = 'error';
      }
    }
  } catch (error) {
    console.error('Erro ao processar ação:', error);
    message = `Erro ao processar ação: ${error instanceof Error ? error.message : String(error)}`;
    messageType = 'error';
  }
}

// Buscar todos os produtos
const products = await getProducts();

// Formatar preço
const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(price);
};

// Obter imagem principal
const getMainImage = (images: ProductImage[] | null | undefined): string | null => {
  if (!images || images.length === 0) return null;
  const primary = images.find(img => img.is_primary);
  return primary ? primary.image_url : images[0].image_url;
};
---

<AdminLayout title="Gerenciar Produtos">
  <div class="mb-6 flex justify-between items-center">
    <h1 class="text-2xl font-bold text-gray-900">Produtos</h1>
    <a href="/admin/produtos/novo" class="btn btn-primary">
      <span class="flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        Novo Produto
      </span>
    </a>
    <button 
      type="button"
      class="text-gray-400 hover:text-gray-500"
      title="Testar Upload de Imagem"
      onclick="document.getElementById('test-upload-form').submit()"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L20 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-2-4h6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2m0-1h6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2h2a2 2 0 012 2v2" />
      </svg>
    </button>
    <form id="test-upload-form" method="POST">
      <input type="hidden" name="action" value="test-upload">
    </form>
  </div>
  
  {message && (
    <div class={`p-4 mb-6 rounded-lg ${messageType === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
      <p>{message}</p>
      {actionResult === false && (
        <p class="mt-2 text-sm">
          <strong>Nota:</strong> Verifique se você está autenticado corretamente.
        </p>
      )}
    </div>
  )}
  
  <!-- Informações de depuração -->
  <div class="p-4 mb-6 bg-gray-100 rounded-lg">
    <h3 class="font-medium mb-2">Informações de Depuração:</h3>
    <p>Total de produtos: {products.length}</p>
  </div>

  <div class="bg-white rounded-lg shadow overflow-hidden">
    <div class="flex border-b border-gray-200 p-4">
      <div class="w-16 font-medium text-gray-500">Imagem</div>
      <div class="flex-1 font-medium text-gray-500">Produto</div>
      <div class="w-32 font-medium text-gray-500">Preço</div>
      <div class="w-32 font-medium text-gray-500">Status</div>
      <div class="w-32 font-medium text-gray-500">Interesse</div>
      <div class="w-32 font-medium text-gray-500">Ações</div>
    </div>
    
    {products.length > 0 ? (
      <div class="divide-y divide-gray-200">
        {products.map((product) => (
          <div class="flex items-center p-4 hover:bg-gray-50">
            <div class="w-16">
              <div class="relative w-12 h-12 rounded overflow-hidden">
                <img 
                  src={getMainImage(product.product_images) || '/placeholder-product.jpg'} 
                  alt={product.title}
                  class="w-full h-full object-cover"
                />
                {product.status === 'sold' && (
                  <div class="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
                    <div class="bg-red-600 text-white text-xs font-bold py-1 px-2 transform -rotate-45">
                      Vendido
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div class="flex-1">
              <h3 class="font-medium text-gray-900">{product.title}</h3>
              <p class="text-sm text-gray-500">{product.categories?.name || 'Sem categoria'}</p>
            </div>
            
            <div class="w-32 font-medium text-gray-900">
              {formatPrice(product.price)}
            </div>
            
            <div class="w-32">
              <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                product.status === 'available' 
                  ? 'bg-green-100 text-green-800' 
                  : 'bg-red-100 text-red-800'
              }`}>
                {product.status === 'available' ? 'Disponível' : 'Vendido'}
              </span>
            </div>
            
            <div class="w-32 text-center">
              <span class="text-sm font-medium text-gray-900">{product.interest_count}</span>
              <span class="text-xs text-gray-500 block">interessados</span>
            </div>
            
            <div class="w-32 flex space-x-2">
              <a 
                href={`/produto/${product.id}`} 
                class="text-gray-400 hover:text-gray-500" 
                title="Ver produto"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
              </a>
              
              <a 
                href={`/admin/produtos/editar/${product.id}`} 
                class="text-gray-400 hover:text-gray-500" 
                title="Editar produto"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 0L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
              </a>
              
              <button 
                type="button"
                class="text-gray-400 hover:text-gray-500 status-toggle" 
                title={product.status === 'available' ? 'Marcar como vendido' : 'Marcar como disponível'}
                data-product-id={product.id}
                data-current-status={product.status}
              >
                {product.status === 'available' ? (
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                ) : (
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                )}
              </button>
              
              <button 
                type="button"
                class="text-gray-400 hover:text-red-500 delete-product" 
                title="Excluir produto"
                data-product-id={product.id}
                data-product-title={product.title}
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-500 text-lg">Nenhum produto cadastrado.</p>
        <a href="/admin/produtos/novo" class="btn btn-primary mt-4 inline-block">Adicionar produto</a>
      </div>
    )}
  </div>
</AdminLayout>

<script>
  // Elementos do DOM
  const statusButtons = document.querySelectorAll('.status-toggle');
  const deleteButtons = document.querySelectorAll('.delete-product');
  
  // Função para recarregar a página após uma ação bem-sucedida
  const reloadAfterAction = async (formData: FormData) => {
    try {
      const response = await fetch('/admin/produtos', {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        // Recarregar a página para mostrar as alterações
        window.location.reload();
      } else {
        console.error('Erro ao executar ação:', response.statusText);
        alert('Ocorreu um erro ao executar a ação. Tente novamente.');
      }
    } catch (error) {
      console.error('Erro ao executar ação:', error);
      alert('Ocorreu um erro ao executar a ação. Tente novamente.');
    }
  };
  
  // Adicionar event listeners aos botões de alteração de status
  statusButtons.forEach(button => {
    button.addEventListener('click', () => {
      const element = button as HTMLElement;
      const productId = element.dataset.productId;
      const currentStatus = element.dataset.currentStatus;
      const newStatus = currentStatus === 'available' ? 'sold' : 'available';
      const action = currentStatus === 'available' ? 'mark-sold' : 'mark-available';
      
      if (confirm(`Deseja realmente marcar este produto como ${newStatus === 'available' ? 'disponível' : 'vendido'}?`)) {
        const formData = new FormData();
        formData.append('action', action);
        formData.append('productId', productId || '');
        
        reloadAfterAction(formData);
      }
    });
  });
  
  // Adicionar event listeners aos botões de exclusão
  deleteButtons.forEach(button => {
    button.addEventListener('click', () => {
      const element = button as HTMLElement;
      const productId = element.dataset.productId;
      const productTitle = element.dataset.productTitle;
      
      if (confirm(`Deseja realmente excluir o produto "${productTitle}"? Esta ação não pode ser desfeita.`)) {
        const formData = new FormData();
        formData.append('action', 'delete');
        formData.append('productId', productId || '');
        
        reloadAfterAction(formData);
      }
    });
  });
</script>
---
import Layout from '../../layouts/Layout.astro';
import ProductGrid from '../../components/ProductGrid.astro';
import WhatsAppButton from '../../components/WhatsAppButton.astro';
import { getProductById, registerInterest, getRelatedProducts, getSiteSettings, getProductInterestCount, getRecommendedProducts, supabase, getProducts, incrementProductViews, checkProductViews } from '../../services/supabase';

// Definir interface para o produto
interface ProductImage {
  id: string;
  image_url: string;
  is_primary: boolean;
}

interface Product {
  id: string;
  title: string;
  description: string;
  price: number;
  status: 'available' | 'sold' | 'hidden';
  visible: boolean;
  product_images: ProductImage[];
  categories: {
    id: string;
    name: string;
    slug: string;
  };
  views: number;
  created_at: string;
  interest_count?: number;
}

// Obter o ID do produto da URL
const { id } = Astro.params;

// Verificar se o ID existe
if (!id) {
  return Astro.redirect('/');
}

// Buscar detalhes do produto - esta é a operação assíncrona principal que precisamos para as metatags
const product = await getProductById(id) as Product | null;

// Verificar se o produto existe e está visível
if (!product || !product.visible) {
  return Astro.redirect('/');
}

// PRIORIDADE: Preparar dados para metatags Open Graph logo após obter o produto
// Construir URL base absoluta
const baseUrl = Astro.site ? Astro.site.toString() : `${Astro.url.protocol}//${Astro.url.host}`;

// 1. Preparar URL canônica (usada em og:url)
const canonicalUrl = new URL(`/produto/${product.id}`, baseUrl).toString();

// 2. Preparar título (usado em og:title)
const productTitle = product.title;

// 3. Preparar descrição curta (usada em og:description)
const shortDescription = product.description && product.description.length > 80
  ? product.description.substring(0, 77) + '...'
  : product.description;

// 4. Preparar URL da imagem (usada em og:image) - USANDO IMAGEM EXTERNA PARA TESTE
// Usar uma imagem externa conhecida para testar se o problema é com o Supabase
let imageUrl = "https://images.unsplash.com/photo-1575936123452-b67c3203c357?q=80";

// Manter a referência ao mainImage para o resto do código
const mainImage = product.product_images.find(img => img.is_primary) || product.product_images[0];

// Registrar as URLs para diagnóstico
console.log('[METATAGS] URL da imagem:', imageUrl);
console.log('[METATAGS] URL canônica:', canonicalUrl);

// Agora podemos continuar com outras operações que não afetam as metatags
// Verificar visualizações antes de incrementar
const viewsBefore = await checkProductViews(id);
console.log(`[DEBUG] Visualizações antes de incrementar: ${viewsBefore}`);

// Incrementar visualizações
const incrementResult = await incrementProductViews(id);
console.log(`[DEBUG] Resultado do incremento de visualizações: ${incrementResult ? 'Sucesso' : 'Falha'}`);

// Verificar visualizações após incrementar
const viewsAfter = await checkProductViews(id);
console.log(`[DEBUG] Visualizações após incrementar: ${viewsAfter}`);

// Buscar produtos relacionados (mesma categoria)
const relatedProducts = await getRelatedProducts(product.categories.id, id);

// Buscar outros produtos disponíveis (excluindo o atual e os relacionados)
const excludeIds = [id, ...relatedProducts.map(p => p.id)];
const otherProducts = (await getProducts('available'))
  .filter(p => !excludeIds.includes(p.id) && p.visible)
  .slice(0, 8);

// Buscar produtos recomendados
const recommendedProducts = await getRecommendedProducts(id, relatedProducts.map(p => p.id));

// Buscar configurações do site
const siteSettings = await getSiteSettings();
const whatsappNumber = siteSettings && typeof siteSettings === 'object' && 'contactWhatsapp' in siteSettings ? siteSettings.contactWhatsapp as string : '';
const whatsappMessage = siteSettings && typeof siteSettings === 'object' && 'whatsappMessage' in siteSettings ? siteSettings.whatsappMessage as string : 'Olá, tenho interesse nesse desapego!';
const paymentMethods = siteSettings && typeof siteSettings === 'object' && 'paymentMethods' in siteSettings ? siteSettings.paymentMethods as string : 'Pix, dinheiro, ou cartão parcelado com juros da maquininha';
const projectName = siteSettings && typeof siteSettings === 'object' && 'projectName' in siteSettings ? siteSettings.projectName as string : 'Desapego dos Martins';

// Obter contagem de interesses
const interestCount = await getProductInterestCount(id);
console.log('Contagem de interesses para produto', id, ':', interestCount);

// Verificar diretamente no banco de dados
const { data: interestsData, error: interestsError } = await supabase
  .from('interests')
  .select('id, product_id')
  .eq('product_id', id);

console.log('Verificação direta de interesses para produto', id, ':', interestsData?.length || 0, 'registros');
console.log('Dados dos interesses:', interestsData);

// Teste com ID fixo
const { data: testData, error: testError } = await supabase
  .from('interests')
  .select('id, product_id')
  .eq('product_id', 25);

console.log('Teste com ID fixo (25):', testData?.length || 0, 'registros');
console.log('Dados do teste:', testData);

if (interestsError) {
  console.error('Erro na verificação direta:', interestsError);
}

// Processar formulário de interesse
let formSubmitted = false;
let formError = '';

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const isRegisterInterest = formData.get('register_interest') === 'true';
    const productId = formData.get('product_id');
    
    console.log('Formulário recebido:', { isRegisterInterest, productId });
    
    if (isRegisterInterest && productId) {
      // Registrar interesse
      console.log('Chamando registerInterest com:', {
        product_id: productId.toString(),
        name: 'Interesse via WhatsApp',
        email: 'whatsapp@interesse.com',
        phone: whatsappNumber || '0000000000'
      });
      
      const result = await registerInterest({
        product_id: productId.toString(),
        name: 'Interesse via WhatsApp',
        email: 'whatsapp@interesse.com',
        phone: whatsappNumber || '0000000000',
        message: whatsappMessage || 'Interesse via botão'
      });
      
      console.log('Resultado do registerInterest:', result);
      
      formSubmitted = result;
      if (!result) {
        formError = 'Erro ao registrar interesse. Tente novamente.';
      }
    }
  } catch (error) {
    console.error('Erro ao processar formulário:', error);
    formError = 'Erro ao processar formulário. Tente novamente.';
  }
}

// Função para formatar preço
function formatPrice(price: number): string {
  return price.toLocaleString('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  });
}

// Logs finais para diagnóstico
console.log('[DEBUG] URL da imagem final:', imageUrl);
console.log('[DEBUG] URL canônica final:', canonicalUrl);

---

<Layout title={`${product.title} | ${projectName}`}>
  <head>
    <!-- APENAS A TAG OG:IMAGE PARA TESTE -->
    <meta property="og:image" content={imageUrl} />
    
    <!-- Outras tags mínimas -->
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Produto" />
    
    <!-- URL canônica no final -->
    <link rel="canonical" href={canonicalUrl} />
  </head>
  
  <!-- Debug da URL da imagem - REMOVER APÓS TESTE -->
  <div class="fixed top-0 left-0 right-0 bg-black text-white p-2 z-50 text-xs overflow-auto max-h-32">
    <p>URL da imagem: {imageUrl}</p>
    <p>URL canônica: {canonicalUrl}</p>
  </div>
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-6">
      <a href="/" class="text-primary-600 hover:text-primary-800 flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Voltar para todos os produtos
      </a>
    </div>
    
    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Galeria de imagens -->
        <div class="p-6">
          <div class="relative aspect-square mb-4 rounded-lg overflow-hidden">
            {product.status === 'sold' && (
              <div class="absolute inset-0 bg-black/40  flex items-center justify-center z-10">
                <div class="relative w-full max-w-md transform -rotate-45">
                  <div class="bg-red-600 text-white text-3xl font-bold py-4 px-8 text-center shadow-2xl ">
                    VENDIDO
                  </div>
                  <div class="absolute inset-0 border-4 border-white/30 -m-1"></div>
                </div>
              </div>
            )}
            <img 
              id="main-image" 
              src={mainImage?.image_url} 
              alt={product.title}
              class="w-full h-full object-cover cursor-zoom-in"
              data-action="open-modal"
            />
          </div>
          
          {product.product_images.length > 1 && (
            <div class="grid grid-cols-5 gap-2">
              {product.product_images.map((image) => (
                <div 
                  class={`aspect-square rounded-md overflow-hidden cursor-pointer border-2 ${image.id === mainImage?.id ? 'border-primary-500' : 'border-transparent'}`}
                  data-image-url={image.image_url}
                  onclick="
                    document.getElementById('main-image').src = this.getAttribute('data-image-url');
                    document.querySelectorAll('[data-image-url]').forEach(el => {
                      el.classList.remove('border-primary-500');
                      el.classList.add('border-transparent');
                    });
                    this.classList.remove('border-transparent');
                    this.classList.add('border-primary-500');
                  "
                >
                  <img 
                    src={image.image_url} 
                    alt={product.title}
                    class="w-full h-full object-cover"
                    data-thumbnail="true"
                  />
                </div>
              ))}
            </div>
          )}
        </div>
        
        <!-- Informações do produto -->
        <div class="p-6">
          <div class="flex flex-col">
            <h1 class="text-2xl font-bold text-gray-900 mb-2">{product.title}</h1>
            <p class="text-sm text-gray-500 mb-4">
              Categoria: <a href={`/categoria/todos?categoria=${product.categories.slug}`} class="text-primary-600 hover:underline">{product.categories.name}</a>
            </p>
            
            <!-- Botão de compartilhamento -->
            <div class="relative inline-block mb-4">
              <button id="share-btn" class="flex items-center text-sm bg-primary-600 text-white hover:bg-primary-700 rounded-md px-4 py-2 transition-all duration-200 shadow-md">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                </svg>
                Compartilhar
              </button>
              <div id="share-menu" class="hidden absolute top-full left-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-20 w-52">
                <div class="p-2">
                  <button id="copy-link-btn" class="w-full text-left px-3 py-2 rounded-md hover:bg-gray-100 flex items-center text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                    </svg>
                    Copiar link
                  </button>
                  <a id="whatsapp-share" href="#" target="_blank" rel="noopener" class="block w-full text-left px-3 py-2 rounded-md hover:bg-gray-100 flex items-center text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.481 5.236 3.48 8.414-.003 6.557-5.338 11.892-11.893 11.892-1.99-.001-3.951-.5-5.688-1.448l-6.305 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.884-.001 2.225.651 3.891 1.746 5.634l-.999 3.648 3.742-.981zm11.387-5.464c-.074-.124-.272-.198-.57-.347-.297-.149-1.758-.868-2.031-.967-.272-.099-.47-.149-.669.149-.198.297-.768.967-.941 1.165-.173.198-.347.223-.644.074-.297-.149-1.255-.462-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.297-.347.446-.521.151-.172.2-.296.3-.495.099-.198.05-.372-.025-.521-.075-.148-.669-1.611-.916-2.206-.242-.579-.487-.501-.669-.51l-.57-.01c-.198 0-.52.074-.792.372s-1.04 1.016-1.04 2.479 1.065 2.876 1.213 3.074c.149.198 2.095 3.2 5.076 4.487.709.306 1.263.489 1.694.626.712.226 1.36.194 1.872.118.571-.085 1.758-.719 2.006-1.413.248-.695.248-1.29.173-1.414z"/>
                    </svg>
                    WhatsApp
                  </a>
                </div>
              </div>
            </div>
            <span id="copy-feedback" class="hidden text-green-600 text-sm font-medium">Link copiado!</span>
            
            <!-- Preço destacado -->
            <div class="bg-primary-50 p-4 rounded-lg mb-6">
              <div class="text-4xl font-bold text-primary-700">
                {formatPrice(product.price)}
              </div>
            </div>
          </div>
          
          <div class="mt-4">
            <h2 class="text-lg font-semibold text-gray-900 mb-2">Descrição</h2>
            <div class="prose prose-sm text-gray-700">
              {product.description.split('\n').map((paragraph) => (
                <p>{paragraph}</p>
              ))}
            </div>
          </div>
          
          <!-- Formas de pagamento -->
          <div class="mt-6 bg-gray-50 rounded-lg p-4">
            <h2 class="text-lg font-semibold text-gray-900 mb-2">Formas de pagamento</h2>
            <div class="flex items-center space-x-2 mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p class="text-gray-700 font-medium">{paymentMethods}</p>
            </div>
          </div>
          
          <!-- Status e botão de WhatsApp -->
          <div class="mt-6">
            {product.status === 'available' ? (
              <div class="space-y-4">
                <div class="p-4 rounded-lg bg-green-50 border border-green-100">
                  <h2 class="text-lg font-semibold text-green-800 mb-1">Produto disponível</h2>
                  <p class="text-sm text-green-700">
                    Este produto está disponível para venda. Clique no botão abaixo para demonstrar interesse.
                  </p>
                  <div class="mt-2 flex items-center space-x-4">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-500 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                      <span class="text-sm text-gray-600">{interestCount} pessoas demonstraram interesse</span>
                    </div>
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                      </svg>
                      <span class="text-sm text-gray-600">{viewsAfter || 0} visualizações</span>
                    </div>
                  </div>
                </div>
                
                <WhatsAppButton 
                  floating={false}
                  buttonText="Tenho interesse neste produto"
                  productName={product.title}
                  productId={id}
                  customMessage={whatsappMessage}
                />
              </div>
            ) : (
              <div class="p-4 rounded-lg bg-red-50 border border-red-100">
                <h2 class="text-lg font-semibold text-red-800 mb-1">Produto vendido</h2>
                <p class="text-sm text-red-700">
                  Este produto já foi vendido, mas você pode ver outros produtos disponíveis.
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
    
    <!-- Produtos relacionados -->
    {relatedProducts.length > 0 && (
      <div class="mt-16 bg-neutral-50/50 py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Produtos relacionados</h2>
          <p class="text-gray-600 mb-8">Outros produtos da mesma categoria</p>
          <ProductGrid products={relatedProducts.map(product => ({ ...product, category: product.categories }))} />
        </div>
      </div>
    )}

    <!-- Produtos recomendados -->
    {recommendedProducts.data && recommendedProducts.data.length > 0 && (
      <div class="py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Você também pode gostar</h2>
          <p class="text-gray-600 mb-8">Produtos selecionados especialmente para você</p>
          <ProductGrid products={recommendedProducts.data.map(product => ({ ...product, category: product.categories }))} />
        </div>
      </div>
    )}
    
    <!-- Outros produtos -->
    {otherProducts.length > 0 && (
      <div class="py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-2">Outros produtos</h2>
          <p class="text-gray-600 mb-8">Outros produtos disponíveis</p>
          <div id="otherProductsGrid">
            <ProductGrid products={otherProducts.map(product => ({ ...product, category: product.categories }))} />
          </div>
          <!-- Loading indicator -->
          <div id="loadingMoreProducts" class="hidden py-8 text-center">
            <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
          </div>
        </div>
      </div>
    )}
  </div>
  
  {/* WhatsApp flutuante */}
  {/* <WhatsAppButton 
    floating={true} 
    productName={product.title}
    productId={product.id}
    buttonText="Tenho interesse neste produto"
  /> */}
</Layout>

<!-- Modal de imagem (no final do arquivo) -->
<div id="imageModal" class="hidden fixed inset-0 bg-black/95 items-center justify-center" style="z-index: 99999;" onclick="closeModal()">
  <button id="closeModalBtn" class="absolute top-4 right-4 text-white hover:text-gray-300 text-3xl" onclick="event.stopPropagation(); closeModal()">
    <i class="fas fa-times"></i>
  </button>
  
  <!-- Botões de navegação -->
  <button class="absolute left-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 text-3xl" onclick="event.stopPropagation(); prevImage()">
    <i class="fas fa-chevron-left"></i>
  </button>
  <button class="absolute right-4 top-1/2 -translate-y-1/2 text-white hover:text-gray-300 text-3xl" onclick="event.stopPropagation(); nextImage()">
    <i class="fas fa-chevron-right"></i>
  </button>
  
  <img 
    id="modalImage" 
    src="" 
    alt=""
    class="max-h-[90vh] max-w-[90vw] object-contain cursor-zoom-out"
    onclick="event.stopPropagation(); closeModal()"
  />
</div>

<script>
  // Declarar tipos para as propriedades globais
  declare global {
    interface Window {
      currentImageIndex: number;
      productImages: string[];
      openModal: (src: string) => void;
      closeModal: () => void;
      prevImage: () => void;
      nextImage: () => void;
    }
  }

  // Variáveis e funções globais para o modal
  window.currentImageIndex = 0;
  window.productImages = Array.from(document.querySelectorAll('[data-image-url]'))
    .map(el => el.getAttribute('data-image-url'))
    .filter((url): url is string => url !== null);

  window.openModal = function(src: string) {
    const modal = document.getElementById('imageModal');
    const modalImage = document.getElementById('modalImage') as HTMLImageElement | null;
    if (modal && modalImage) {
      modalImage.src = src;
      window.currentImageIndex = window.productImages.indexOf(src);
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }
  }

  window.closeModal = function() {
    const modal = document.getElementById('imageModal');
    if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = '';
    }
  }

  window.prevImage = function() {
    if (window.currentImageIndex > 0) {
      window.currentImageIndex--;
    } else {
      window.currentImageIndex = window.productImages.length - 1;
    }
    const modalImage = document.getElementById('modalImage') as HTMLImageElement | null;
    if (modalImage) {
      modalImage.src = window.productImages[window.currentImageIndex];
    }
  }

  window.nextImage = function() {
    if (window.currentImageIndex < window.productImages.length - 1) {
      window.currentImageIndex++;
    } else {
      window.currentImageIndex = 0;
    }
    const modalImage = document.getElementById('modalImage') as HTMLImageElement | null;
    if (modalImage) {
      modalImage.src = window.productImages[window.currentImageIndex];
    }
  }

  // Adicionar evento de clique para abrir o modal na imagem principal
  document.addEventListener('DOMContentLoaded', () => {
    // Configurar o modal para a imagem principal
    const mainImage = document.getElementById('main-image');
    if (mainImage) {
      mainImage.addEventListener('click', () => {
        if (mainImage instanceof HTMLImageElement) {
          window.openModal(mainImage.src);
        }
      });
    }

    // Configurar o botão de fechar e o clique fora do modal
    const modal = document.getElementById('imageModal');
    const closeBtn = document.getElementById('closeModalBtn');
    const modalImage = document.getElementById('modalImage');
    
    if (modal) {
      modal.addEventListener('click', window.closeModal);
    }
    
    if (closeBtn) {
      closeBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        window.closeModal();
      });
    }
    
    if (modalImage) {
      modalImage.addEventListener('click', (e) => {
        e.stopPropagation();
        window.closeModal();
      });
    }
  });

  // Fechar com ESC
  document.addEventListener('keydown', e => {
    if (e.key === 'Escape') window.closeModal();
    if (e.key === 'ArrowLeft') window.prevImage();
    if (e.key === 'ArrowRight') window.nextImage();
  });

  // Galeria de imagens
  document.addEventListener('DOMContentLoaded', () => {
    const thumbnails = document.querySelectorAll('[data-thumbnail]');
    thumbnails.forEach((thumbnail) => {
      thumbnail.addEventListener('click', () => {
        const imageUrl = thumbnail.getAttribute('data-image-url');
        if (imageUrl) {
          const mainImage = document.getElementById('main-image') as HTMLImageElement | null;
          if (mainImage) {
            mainImage.src = imageUrl;
          }
        }
        thumbnails.forEach((thumb) => {
          thumb.classList.remove('border-primary-500');
          thumb.classList.add('border-transparent');
        });
        thumbnail.classList.remove('border-transparent');
        thumbnail.classList.add('border-primary-500');
      });
    });
  });

  document.addEventListener('DOMContentLoaded', () => {
    const shareButton = document.getElementById('share-btn');
    const shareMenu = document.getElementById('share-menu');
    const copyLinkButton = document.getElementById('copy-link-btn');
    const copyFeedback = document.getElementById('copy-feedback');
    const whatsappShare = document.getElementById('whatsapp-share') as HTMLAnchorElement;
    const facebookShare = document.getElementById('facebook-share') as HTMLAnchorElement;
    const twitterShare = document.getElementById('twitter-share') as HTMLAnchorElement;
    const currentUrl = window.location.href;
    const productTitle = document.querySelector('h1')?.textContent || '';

    if (shareButton) {
      shareButton.addEventListener('click', (e) => {
        e.stopPropagation();
        shareMenu?.classList.toggle('hidden');
      });
    }

    if (copyLinkButton) {
      copyLinkButton.addEventListener('click', () => {
        navigator.clipboard.writeText(currentUrl);
        copyFeedback?.classList.remove('hidden');
        shareMenu?.classList.add('hidden');
        setTimeout(() => {
          copyFeedback?.classList.add('hidden');
        }, 2000);
      });
    }

    if (whatsappShare) {
      const message = `Confira este produto: ${productTitle} - ${currentUrl}`;
      whatsappShare.href = `https://wa.me/?text=${encodeURIComponent(message)}`;
    }
    
    if (facebookShare) {
      facebookShare.href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`;
    }
    
    if (twitterShare) {
      const message = `Confira este produto: ${productTitle}`;
      twitterShare.href = `https://twitter.com/intent/tweet?text=${encodeURIComponent(message)}&url=${encodeURIComponent(currentUrl)}`;
    }

    // Fechar o menu ao clicar fora
    document.addEventListener('click', (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      if (shareMenu && !shareMenu.classList.contains('hidden') && 
          !shareButton?.contains(target) && 
          !shareMenu.contains(target)) {
        shareMenu.classList.add('hidden');
      }
    });
  });

  const productId = '${Astro.params.id}';
  const excludeIds = [`${productId}`];
  let currentPage = 1;
  let isLoading = false;
  let hasMore = true;

  async function loadMoreProducts() {
    if (isLoading || !hasMore) return;
    
    isLoading = true;
    document.getElementById('loadingMoreProducts')?.classList.remove('hidden');
    
    try {
      const response = await fetch(`/api/products?page=${currentPage + 1}&exclude=${excludeIds.join(',')}`);
      const products = await response.json();
      
      if (products && products.length > 0) {
        const grid = document.getElementById('otherProductsGrid')?.querySelector('.product-grid');
        
        products.forEach((product: any) => {
          const div = document.createElement('div');
          div.className = 'product-card-wrapper';
          
          div.innerHTML = `
            <div class="product-card bg-white rounded-xl shadow-soft overflow-hidden h-full w-full relative flex flex-col">
              ${product.categories ? `
                <div class="absolute top-3 right-3 z-10">
                  <a href="/categoria/${product.categories.slug}" class="badge inline-flex items-center px-3 py-1.5 rounded-lg text-sm font-semibold 
                    bg-white/90 backdrop-blur-sm text-primary-700 hover:bg-white 
                    transition-all duration-300 shadow-lg hover:shadow-xl">
                    ${product.categories.name}
                  </a>
                </div>
              ` : ''}
              <a href="/produto/${product.id}" class="block flex-grow">
                <div class="aspect-w-1 aspect-h-1">
                  <img 
                    src="${product.image_url || '/images/no-image.png'}" 
                    alt="${product.title}"
                    class="w-full h-full object-cover"
                  >
                </div>
                <div class="p-4">
                  <h3 class="text-lg font-semibold text-gray-800 line-clamp-2">${product.title}</h3>
                  <p class="text-xl font-bold text-primary-600 mt-2">R$ ${product.price.toFixed(2)}</p>
                </div>
              </a>
              ${product.status === 'sold' ? `
                <div class="absolute inset-0 bg-black/50 flex items-center justify-center">
                  <span class="bg-red-500 text-white px-4 py-2 rounded-lg font-bold uppercase">Vendido</span>
                </div>
              ` : ''}
            </div>
          `;
          
          grid?.appendChild(div);
        });
        
        currentPage++;
      } else {
        hasMore = false;
        document.getElementById('loadingMoreProducts')?.remove();
      }
    } catch (error) {
      console.error('Erro ao carregar mais produtos:', error);
    } finally {
      isLoading = false;
      document.getElementById('loadingMoreProducts')?.classList.add('hidden');
    }
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting && !isLoading) {
        loadMoreProducts();
      }
    });
  }, { rootMargin: '100px' });

  const loadingIndicator = document.getElementById('loadingMoreProducts');
  if (loadingIndicator) {
    observer.observe(loadingIndicator);
  }
</script>

<style>
  #modalImage {
    -webkit-user-select: none;
    user-select: none;
    -webkit-touch-callout: none;
  }

  @media (max-width: 768px) {
    #modalImage {
      -webkit-user-select: auto;
      user-select: auto;
      -webkit-touch-callout: default;
      touch-action: pinch-zoom;
    }
  }
</style>

<style>
  .label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .input {
    @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500;
  }
  
  .btn {
    @apply inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2;
  }
  
  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }
  
  .fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100vw;
    height: 100vh;
    object-fit: contain;
    background: rgba(0, 0, 0, 0.95);
    z-index: 9999;
    padding: 2rem;
    cursor: zoom-out;
    transition: all 0.3s ease-out;
  }

  #main-image {
    transition: transform 0.3s ease-out;
  }

  #main-image:hover {
    transform: scale(1.02);
  }
</style>

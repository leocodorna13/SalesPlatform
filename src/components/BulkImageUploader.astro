---
---

<div class="space-y-4">
  <label class="label">Carregamento em massa de produtos</label>
  
  <div class="border-dashed border-2 border-gray-300 rounded-lg p-6 text-center" id="bulk-upload-container">
    <input
      type="file"
      id="bulk-product-images"
      name="bulk-images"
      accept="image/*"
      multiple
      class="hidden"
    />
    
    <label for="bulk-product-images" class="cursor-pointer flex flex-col items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
      </svg>
      <span class="text-gray-600 font-medium">Clique para selecionar múltiplas imagens</span>
      <span class="text-gray-500 text-sm mt-1">ou arraste e solte aqui</span>
    </label>
  </div>
  
  <!-- Contêiner para lista de imagens e formulários -->
  <div id="bulk-image-list" class="space-y-6 mt-4"></div>
  
  <div class="text-gray-500 text-sm">
    <p>• Cada imagem se tornará um produto separado</p>
    <p>• Preencha os detalhes para cada produto</p>
    <p>• Formatos aceitos: JPG, PNG, WebP</p>
    <p>• Tamanho máximo: 5MB por imagem</p>
  </div>
  
  <div class="flex justify-end space-x-3 mt-6" id="bulk-actions" style="display: none;">
    <button type="button" class="btn btn-outline" id="bulk-cancel">
      Cancelar
    </button>
    <button type="button" class="btn btn-primary" id="bulk-submit">
      Publicar todos os produtos
    </button>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const fileInput = document.getElementById('bulk-product-images');
    const imageList = document.getElementById('bulk-image-list');
    const uploadContainer = document.getElementById('bulk-upload-container');
    const bulkActions = document.getElementById('bulk-actions');
    const bulkSubmit = document.getElementById('bulk-submit');
    const bulkCancel = document.getElementById('bulk-cancel');
    const productForm = document.getElementById('product-form');
    
    if (!fileInput || !imageList || !uploadContainer || !bulkActions || !bulkSubmit || !bulkCancel || !productForm) {
      console.error('Elementos necessários não encontrados');
      return;
    }
    
    // Obter categorias do select original
    function getCategories() {
      const categoryOptions = document.getElementById('category-options');
      if (!categoryOptions) return [];
      
      return Array.from(categoryOptions.querySelectorAll('option'))
        .filter(option => option.value)
        .map(option => ({
          id: option.getAttribute('data-id'),
          name: option.value
        }));
    }
    
    // Função para mostrar lista de imagens e formulários
    function showBulkList(files) {
      // Limpar lista anterior
      imageList.innerHTML = '';
      
      if (files.length === 0) {
        bulkActions.style.display = 'none';
        return;
      }
      
      bulkActions.style.display = 'flex';
      const categories = getCategories();
      
      Array.from(files).forEach((file, index) => {
        if (!file.type.match('image.*')) return;
        
        const reader = new FileReader();
        
        reader.onload = (e) => {
          const listItem = document.createElement('div');
          listItem.className = 'bg-white rounded-lg shadow-md overflow-hidden';
          
          listItem.innerHTML = `
            <div class="flex flex-col md:flex-row">
              <!-- Container de imagens -->
              <div class="md:w-1/4 p-4 bg-gray-50">
                <div class="flex flex-col gap-2 product-images" data-product-index="${index}">
                  <div class="relative group">
                    <img src="${e.target.result}" alt="Produto ${index + 1}" class="w-full h-32 object-contain rounded-lg" />
                    <button type="button" class="absolute top-1 right-1 bg-white rounded-full p-1 delete-image">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>
                <button type="button" class="mt-2 w-full flex items-center justify-center gap-1 py-1 px-2 bg-white rounded text-sm text-primary-500 hover:bg-gray-100 add-image" data-product-index="${index}">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                  </svg>
                  Adicionar imagem
                </button>
              </div>
              
              <!-- Formulário do produto -->
              <div class="md:w-3/4 p-4 space-y-4">
                <div class="relative">
                  <!-- Botão de excluir produto -->
                  <button type="button" class="absolute -top-2 right-0 bg-red-100 rounded-full p-1.5 hover:bg-red-200 delete-bulk-item" data-index="${index}">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                  <div class="text-sm text-gray-500 mb-2">Produto ${index + 1}</div>
                </div>
                
                <input type="hidden" name="bulk-file-${index}" value="${file.name}" />
                
                <div>
                  <label class="label">Título do produto</label>
                  <input type="text" class="input bulk-title" data-index="${index}" placeholder="Ex: Sofá de 3 lugares" required />
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label class="label">Preço (R$)</label>
                    <input type="number" class="input bulk-price" data-index="${index}" placeholder="Ex: 299.90" min="0" step="0.01" required />
                  </div>
                  
                  <div>
                    <label class="label">Categoria</label>
                    <div class="relative">
                      <input type="text" class="input bulk-category" data-index="${index}" placeholder="Digite ou selecione uma categoria" list="bulk-categories-${index}" required />
                      <datalist id="bulk-categories-${index}">
                        ${categories.map(cat => `<option value="${cat.name}" data-id="${cat.id}"></option>`).join('')}
                      </datalist>
                    </div>
                  </div>
                </div>
                
                <div>
                  <label class="label">Descrição</label>
                  <textarea class="input bulk-description" data-index="${index}" rows="3" placeholder="Descreva o produto, estado de conservação, dimensões, etc."></textarea>
                </div>
              </div>
            </div>
          `;
          
          imageList.appendChild(listItem);
        };
        
        reader.readAsDataURL(file);
      });
    }
    
    // Adicionar uma nova imagem a um produto
    function addImageToProduct(productElement, imageDataURL) {
      const container = productElement.querySelector('.product-images');
      if (!container) return;
      
      const imageContainer = document.createElement('div');
      imageContainer.className = 'relative group';
      imageContainer.innerHTML = `
        <img src="${imageDataURL}" alt="Imagem do produto" class="w-full h-32 object-contain rounded-lg" />
        <button type="button" class="absolute top-1 right-1 bg-white rounded-full p-1 delete-image">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      `;
      
      container.appendChild(imageContainer);
    }
    
    // Evento para seleção de arquivos
    fileInput.addEventListener('change', (e) => {
      showBulkList(e.target.files);
    });
    
    // Suporte para arrastar e soltar
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
      }, false);
    });
    
    uploadContainer.addEventListener('dragenter', () => {
      uploadContainer.classList.add('border-blue-500');
    }, false);
    
    uploadContainer.addEventListener('dragleave', () => {
      uploadContainer.classList.remove('border-blue-500');
    }, false);
    
    uploadContainer.addEventListener('drop', (e) => {
      uploadContainer.classList.remove('border-blue-500');
      const dt = e.dataTransfer;
      const files = dt.files;
      fileInput.files = files;
      showBulkList(files);
    }, false);
    
    // Remover item da lista
    imageList.addEventListener('click', (e) => {
      // Handler para remover produto
      if (e.target.closest('.delete-bulk-item')) {
        const button = e.target.closest('.delete-bulk-item');
        const index = parseInt(button.dataset.index);
        const listItem = button.closest('.bg-white');
        
        // Remover o produto
        const dt = new DataTransfer();
        const files = fileInput.files;
        
        for (let i = 0; i < files.length; i++) {
          if (i !== index) {
            dt.items.add(files[i]);
          }
        }
        
        fileInput.files = dt.files;
        listItem.remove();
        
        if (imageList.querySelectorAll('.bg-white').length === 0) {
          bulkActions.style.display = 'none';
        }
      }
      
      // Handler para remover imagem
      if (e.target.closest('.delete-image')) {
        const button = e.target.closest('.delete-image');
        const img = button.closest('.relative').querySelector('img');
        img.src = '';
        img.style.display = 'none';
      }
      
      // Handler para adicionar imagem
      if (e.target.closest('.add-image')) {
        const button = e.target.closest('.add-image');
        const container = button.previousElementSibling; // Pega o container de imagens que está antes do botão
        
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.multiple = true;
        
        input.onchange = (e) => {
          Array.from(e.target.files).forEach(file => {
            const reader = new FileReader();
            reader.onload = (e) => {
              const div = document.createElement('div');
              div.className = 'relative group';
              div.innerHTML = `
                <img src="${e.target.result}" alt="Imagem do produto" class="w-full h-32 object-contain rounded-lg" />
                <button type="button" class="absolute top-1 right-1 bg-white rounded-full p-1 delete-image">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              `;
              container.appendChild(div);
            };
            reader.readAsDataURL(file);
          });
        };
        input.click();
      }
    });
    
    // Cancelar upload em massa
    bulkCancel.addEventListener('click', () => {
      fileInput.value = '';
      imageList.innerHTML = '';
      bulkActions.style.display = 'none';
    });
    
    // Submeter todos os produtos
    bulkSubmit.addEventListener('click', async () => {
      const formData = new FormData();
      formData.append('bulk_upload', 'true');
      
      // Pegar apenas os produtos que têm imagens
      const validProducts = Array.from(document.querySelectorAll('.bg-white')).filter(item => 
        item.querySelector('.product-images img:not([style*="display: none"])')
      );
      
      console.log(`Produtos válidos encontrados: ${validProducts.length}`);
      formData.append('product_count', validProducts.length.toString());
      let hasErrors = false;
      
      // Coletar todas as promessas de imagens
      const allImagePromises = [];
      
      validProducts.forEach((item, productIndex) => {
        const titleInput = item.querySelector('.bulk-title');
        const priceInput = item.querySelector('.bulk-price');
        const categoryInput = item.querySelector('.bulk-category');
        const descriptionInput = item.querySelector('.bulk-description');
        const images = item.querySelectorAll('.product-images img:not([style*="display: none"])');
        
        console.log(`Produto ${productIndex}: ${titleInput?.value}, imagens: ${images.length}`);
        
        if (!titleInput || !priceInput || !categoryInput) {
          console.error(`Campos não encontrados para o produto ${productIndex}`);
          hasErrors = true;
          return;
        }
        
        // Validar campos obrigatórios
        if (!titleInput.value || !priceInput.value || !categoryInput.value || images.length === 0) {
          titleInput.classList.add('border-red-500');
          priceInput.classList.add('border-red-500');
          categoryInput.classList.add('border-red-500');
          hasErrors = true;
          return;
        }
        
        // Encontrar ID da categoria
        const categories = getCategories();
        let categoryId = null;
        for (const category of categories) {
          if (category.name.toLowerCase() === categoryInput.value.toLowerCase()) {
            categoryId = category.id;
            break;
          }
        }
        
        // Adicionar dados do produto
        formData.append(`title_${productIndex}`, titleInput.value);
        formData.append(`price_${productIndex}`, priceInput.value);
        formData.append(`category_${productIndex}`, categoryInput.value);
        formData.append(`category_id_${productIndex}`, categoryId || '');
        formData.append(`description_${productIndex}`, descriptionInput?.value || '');
        
        // Adicionar cada imagem - apenas imagens visíveis
        const visibleImages = Array.from(images);
        visibleImages.forEach((img, imgIndex) => {
          const imagePromise = fetch(img.src)
            .then(res => res.blob())
            .then(blob => {
              const file = new File([blob], `product_${productIndex}_${imgIndex}.jpg`, { type: 'image/jpeg' });
              formData.append(`image_${productIndex}_${imgIndex}`, file);
            });
          allImagePromises.push(imagePromise);
        });
        
        // Registrar o número de imagens para este produto
        formData.append(`image_count_${productIndex}`, visibleImages.length.toString());
      });
      
      if (hasErrors) {
        alert('Por favor, preencha todos os campos obrigatórios para cada produto.');
        return;
      }
      
      try {
        bulkSubmit.disabled = true;
        bulkSubmit.textContent = 'Preparando imagens...';
        
        // Aguardar todas as conversões de imagens
        await Promise.all(allImagePromises);
        
        bulkSubmit.textContent = 'Publicando...';
        
        // Criar um novo formulário e adicionar os campos
        const tempForm = document.createElement('form');
        tempForm.method = 'POST';
        tempForm.action = '/admin/produtos/novo';
        tempForm.enctype = 'multipart/form-data';
        
        for (const [key, value] of formData.entries()) {
          if (value instanceof Blob) {
            // Para arquivos, criar um input de arquivo
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.name = key;
            fileInput.style.display = 'none';
            
            // Criar um objeto de transferência de dados
            const dt = new DataTransfer();
            dt.items.add(new File([value], value.name, { type: value.type }));
            fileInput.files = dt.files;
            
            tempForm.appendChild(fileInput);
          } else {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = String(value);
            tempForm.appendChild(input);
          }
        }
        
        // Adicionar ao documento e enviar
        document.body.appendChild(tempForm);
        tempForm.submit();
      } catch (error) {
        console.error('Erro ao processar imagens:', error);
        alert('Ocorreu um erro ao processar as imagens. Por favor, tente novamente.');
        bulkSubmit.disabled = false;
        bulkSubmit.textContent = 'Publicar todos os produtos';
      }
    });
    
    // Função para converter dataURL para Blob
    function dataURLtoBlob(dataURL) {
      const arr = dataURL.split(',');
      const mime = arr[0].match(/:(.*?);/)[1];
      const bstr = atob(arr[1]);
      let n = bstr.length;
      const u8arr = new Uint8Array(n);
      while(n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new Blob([u8arr], {type: mime});
    }
  });
  
</script>

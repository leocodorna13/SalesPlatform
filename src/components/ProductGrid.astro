---
import ProductCard from './ProductCard.astro';
import { supabase } from '../services/supabase';

interface ProductImage {
  id: string;
  image_url: string;
  is_primary: boolean;
}

interface Product {
  id: string;
  title: string;
  price: number;
  status: 'available' | 'sold';
  categories: {
    name: string;
    slug: string;
  } | null;
  product_images: ProductImage[];
  views_count: number;
  interest_count: number;
  created_at: string;
}

interface Props {
  products: Product[];
  showSold?: boolean;
}

const { products, showSold = true } = Astro.props;

// Filtrar produtos vendidos se necessÃ¡rio
const filteredProducts = showSold ? products : products.filter(p => p.status === 'available');

// Encontrar a imagem principal para cada produto
const getMainImage = (images: ProductImage[]) => {
  if (!images || images.length === 0) return null;
  const primary = images.find((img: ProductImage) => img.is_primary);
  return primary ? primary.image_url : images[0].image_url;
};

// Obter contagem de interesses para cada produto
const interestCounts = await Promise.all(
  filteredProducts.map(async (product) => {
    const productId = typeof product.id === 'string' ? parseInt(product.id, 10) : product.id;
    console.log('Buscando interesses para produto:', productId, 'tipo:', typeof productId, 'original:', product.id);
    
    // Teste direto com o ID
    const { data, error } = await supabase
      .from('interests')
      .select('id')
      .eq('product_id', productId);
    
    const count = data?.length || 0;
    console.log(`Produto ${productId}: ${count} interesses`);
    
    return count;
  })
);

console.log('Contagens de interesse:', interestCounts);

// Ordenar produtos por interesse
filteredProducts.sort((a, b) => {
  const interestA = a.interest_count || 0;
  const interestB = b.interest_count || 0;
  return interestB - interestA;
});

---

<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 product-grid">
  {filteredProducts.length > 0 ? (
    filteredProducts.map((product, index) => (
      <div class="w-full">
        <ProductCard
          product={{
            ...product,
            interestCount: interestCounts[index] || 0,
            created_at: product.created_at || new Date().toISOString(),
            categories: product.categories || null,
            category: product.category || null,
            status: product.status || 'available'
          } as Product}
        />
      </div>
    ))
  ) : (
    <div class="col-span-full text-center py-8 text-neutral-500">
      Nenhum produto encontrado
    </div>
  )}
</div>

<style>
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .product-card-wrapper {
    height: 100%;
    min-height: 350px;
    display: flex;
  }

  @media (min-width: 640px) {
    .product-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 768px) {
    .product-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .product-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }
</style>
<div id="noResults" class="text-center py-8 hidden">
  <p class="text-gray-500">Nenhum produto encontrado</p>
</div>

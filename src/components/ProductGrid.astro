---
import ProductCard from './ProductCard.astro';
import { supabase } from '../services/supabase';
import type { Product, ProductImage } from '../types';

interface Props {
  products: Product[];
  showSold?: boolean;
}

const { products, showSold = true } = Astro.props;

// Filtrar produtos vendidos se necessÃ¡rio
const filteredProducts = showSold ? products : products.filter(p => p.status !== 'sold');

// Encontrar a imagem principal para cada produto
const getMainImage = (images: ProductImage[]) => {
  if (!images || images.length === 0) return null;
  const primary = images.find((img: ProductImage) => img.is_primary);
  return primary ? primary.image_url : images[0].image_url;
};

// Buscar contagem de interesses para cada produto
const { data: interests } = await supabase
  .from('interests')
  .select('product_id, count')
  .in('product_id', products.map(p => p.id));

const interestCounts = interests?.reduce((acc: Record<string, number>, curr: { product_id: string, count: number }) => {
  acc[curr.product_id] = curr.count;
  return acc;
}, {}) || {};

// Ordenar produtos por interesse
filteredProducts.sort((a, b) => {
  const interestA = interestCounts[a.id] || 0;
  const interestB = interestCounts[b.id] || 0;
  return interestB - interestA;
});

---

<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 product-grid">
  {filteredProducts.length > 0 ? (
    filteredProducts.map((product) => (
      <div class="w-full">
        <ProductCard
          product={{
            ...product,
            interestCount: interestCounts[product.id] || 0,
            created_at: product.created_at || new Date().toISOString(),
            categories: product.categories || undefined,
            category: product.category || undefined,
            status: product.status || 'available'
          }}
        />
      </div>
    ))
  ) : (
    <div class="col-span-full text-center py-8 text-neutral-500">
      Nenhum produto encontrado
    </div>
  )}
</div>

<style>
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .product-card-wrapper {
    height: 100%;
    min-height: 350px;
    display: flex;
  }

  @media (min-width: 640px) {
    .product-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 768px) {
    .product-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .product-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }
</style>
<div id="noResults" class="text-center py-8 hidden">
  <p class="text-gray-500">Nenhum produto encontrado</p>
</div>

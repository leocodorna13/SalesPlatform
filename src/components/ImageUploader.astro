---
---

<div class="space-y-4" id="image-uploader-component">
  <label class="label">Imagens do produto</label>
  
  <div class="border-dashed border-2 border-gray-300 rounded-lg p-6 text-center" id="upload-container">
    <input
      type="file"
      id="file-upload"
      accept="image/*"
      multiple
      class="hidden"
    />
    
    <label for="file-upload" class="cursor-pointer flex flex-col items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
      </svg>
      <span class="text-gray-600 font-medium">Clique para selecionar imagens</span>
      <span class="text-gray-500 text-sm mt-1">ou arraste e solte aqui</span>
    </label>
  </div>
  
  <div id="image-preview" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 mt-4 hidden"></div>
  
  <div class="text-gray-500 text-sm">
    <p>• A primeira imagem será a principal</p>
    <p>• Formatos aceitos: JPG, PNG, WebP</p>
    <p>• Tamanho máximo: 5MB por imagem</p>
  </div>
</div>

<script is:inline>
  // Executar quando o DOM estiver completamente carregado
  window.addEventListener('DOMContentLoaded', () => {
    console.log('ImageUploader - DOM carregado');
    
    // Armazenar os arquivos selecionados
    const files = [];
    
    // Expor a função para obter os arquivos
    window.getUploadedFiles = function() {
      console.log('getUploadedFiles chamado, retornando:', files);
      return files;
    };
    
    // Elementos DOM
    const fileInput = document.getElementById('file-upload');
    const previewContainer = document.getElementById('image-preview');
    const uploadContainer = document.getElementById('upload-container');
    const dropZone = document.querySelector('.border-dashed');
    
    console.log('Elementos DOM:');
    console.log('- fileInput:', fileInput);
    console.log('- previewContainer:', previewContainer);
    console.log('- dropZone:', dropZone);
    
    if (!fileInput || !previewContainer || !dropZone) {
      console.error('Elementos necessários não encontrados');
      return;
    }
    
    // Adicionar evento de mudança para o input de arquivo
    fileInput.addEventListener('change', (e) => {
      const input = e.target;
      if (input.files) {
        handleFileSelect(input.files);
      }
    });
    
    // Adicionar eventos de drag and drop
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      e.stopPropagation();
      dropZone.classList.add('border-primary-300', 'bg-primary-50');
    });
    
    dropZone.addEventListener('dragleave', (e) => {
      e.preventDefault();
      e.stopPropagation();
      dropZone.classList.remove('border-primary-300', 'bg-primary-50');
    });
    
    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      dropZone.classList.remove('border-primary-300', 'bg-primary-50');
      
      if (e.dataTransfer && e.dataTransfer.files.length > 0) {
        handleFileSelect(e.dataTransfer.files);
      }
    });
    
    // Função para lidar com a seleção de arquivos
    function handleFileSelect(selectedFiles) {
      if (!selectedFiles || selectedFiles.length === 0) return;
      
      // Mostrar o container de preview
      previewContainer.classList.remove('hidden');
      
      // Adicionar cada arquivo à visualização
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        
        // Verificar se é uma imagem
        if (!file.type.match('image.*')) continue;
        
        // Adicionar ao array de arquivos
        files.push(file);
        
        // Criar elemento de visualização
        const previewElement = document.createElement('div');
        previewElement.className = 'relative group';
        
        // Criar o reader para ler o arquivo como URL de dados
        const reader = new FileReader();
        reader.onload = (function(file, index) {
          return function(e) {
            if (!e.target || !e.target.result) return;
            
            // Criar a imagem de preview
            const img = document.createElement('img');
            img.src = e.target.result;
            img.className = 'w-full h-32 object-cover rounded-lg';
            img.alt = file.name;
            
            // Adicionar botão de remoção
            const removeButton = document.createElement('button');
            removeButton.className = 'absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity';
            removeButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            `;
            removeButton.addEventListener('click', function() {
              // Remover do array de arquivos
              files.splice(index, 1);
              
              // Remover da visualização
              previewElement.remove();
              
              // Se não houver mais arquivos, esconder o container de preview
              if (files.length === 0) {
                previewContainer.classList.add('hidden');
              }
            });
            
            // Adicionar badge de imagem principal
            if (index === 0) {
              const primaryBadge = document.createElement('div');
              primaryBadge.className = 'absolute bottom-2 right-2 bg-green-500 text-white rounded-full p-1';
              primaryBadge.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
              `;
              previewElement.appendChild(primaryBadge);
            }
            
            // Adicionar elementos ao preview
            previewElement.appendChild(img);
            previewElement.appendChild(removeButton);
            
            // Adicionar ao container
            previewContainer.appendChild(previewElement);
          };
        })(file, files.length - 1);
        
        // Ler o arquivo como URL de dados
        reader.readAsDataURL(file);
      }
    }
  });
</script>

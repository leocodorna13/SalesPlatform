---
---

<div class="space-y-2">
  <label class="label">Imagens do produto</label>
  <div class="border-2 border-dashed border-gray-300 rounded-lg p-4">
    <div id="image-preview" class="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-4 hidden">
      <!-- Previews serão adicionados aqui via JavaScript -->
    </div>
    
    <div id="upload-container" class="text-center py-6">
      <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
      <p class="mt-1 text-sm text-gray-600">
        Arraste e solte imagens aqui, ou
        <label for="file-upload" class="relative cursor-pointer">
          <span class="text-primary-600 hover:text-primary-500">selecione do seu computador</span>
          <input id="file-upload" name="file-upload" type="file" class="sr-only" accept="image/*" multiple />
        </label>
      </p>
      <p class="text-xs text-gray-500 mt-1">
        PNG, JPG, GIF até 10MB
      </p>
    </div>
  </div>
</div>

<script>
  // Armazenar os arquivos selecionados
  const files = [];
  
  // Expor a função para obter os arquivos
  // @ts-ignore - Adicionando propriedade ao objeto window
  window.getUploadedFiles = () => files;
  
  // Elementos DOM
  const fileInput = document.getElementById('file-upload');
  const previewContainer = document.getElementById('image-preview');
  const uploadContainer = document.getElementById('upload-container');
  
  // Adicionar evento de mudança para o input de arquivo
  fileInput.addEventListener('change', handleFileSelect);
  
  // Adicionar eventos de drag and drop
  const dropZone = document.querySelector('.border-dashed');
  dropZone.addEventListener('dragover', handleDragOver);
  dropZone.addEventListener('drop', handleDrop);
  
  // Função para lidar com a seleção de arquivos
  function handleFileSelect(e) {
    const selectedFiles = e.target.files;
    addFilesToPreview(selectedFiles);
  }
  
  // Função para lidar com o evento dragover
  function handleDragOver(e) {
    e.preventDefault();
    e.stopPropagation();
    dropZone.classList.add('border-primary-300', 'bg-primary-50');
  }
  
  // Função para lidar com o evento drop
  function handleDrop(e) {
    e.preventDefault();
    e.stopPropagation();
    
    dropZone.classList.remove('border-primary-300', 'bg-primary-50');
    
    if (e.dataTransfer.files.length > 0) {
      addFilesToPreview(e.dataTransfer.files);
    }
  }
  
  // Função para adicionar arquivos à visualização
  function addFilesToPreview(selectedFiles) {
    if (selectedFiles.length === 0) return;
    
    // Mostrar o container de preview
    previewContainer.classList.remove('hidden');
    
    // Adicionar cada arquivo à visualização
    for (let i = 0; i < selectedFiles.length; i++) {
      const file = selectedFiles[i];
      
      // Verificar se é uma imagem
      if (!file.type.match('image.*')) continue;
      
      // Adicionar ao array de arquivos
      files.push(file);
      
      // Criar elemento de visualização
      const previewElement = document.createElement('div');
      previewElement.className = 'relative group';
      
      // Criar o reader para ler o arquivo como URL de dados
      const reader = new FileReader();
      reader.onload = (function(file, index) {
        return function(e) {
          // Criar a imagem de preview
          const img = document.createElement('img');
          // Garantir que o resultado é uma string
          img.src = typeof e.target.result === 'string' 
            ? e.target.result 
            : '';
          img.className = 'w-full h-32 object-cover rounded-lg';
          img.alt = file.name;
          
          // Adicionar botão de remoção
          const removeButton = document.createElement('button');
          removeButton.className = 'absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity';
          removeButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          `;
          removeButton.addEventListener('click', function() {
            // Remover do array de arquivos
            files.splice(index, 1);
            
            // Remover da visualização
            previewElement.remove();
            
            // Se não houver mais arquivos, esconder o container de preview
            if (files.length === 0) {
              previewContainer.classList.add('hidden');
            }
          });
          
          // Adicionar badge de imagem principal
          const primaryBadge = document.createElement('div');
          if (index === 0) {
            primaryBadge.className = 'absolute bottom-2 right-2 bg-green-500 text-white rounded-full p-1';
            primaryBadge.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            `;
          }
          
          // Adicionar elementos ao preview
          previewElement.appendChild(img);
          previewElement.appendChild(removeButton);
          if (index === 0) {
            previewElement.appendChild(primaryBadge);
          }
          
          // Adicionar ao container
          previewContainer.appendChild(previewElement);
        };
      })(file, files.length - 1);
      
      // Ler o arquivo como URL de dados
      reader.readAsDataURL(file);
    }
  }
</script>

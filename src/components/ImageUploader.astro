---
interface Props {
  name?: string;
  multiple?: boolean;
  required?: boolean;
}

const { 
  name = "images",
  multiple = true,
  required = true
} = Astro.props;
---

<div class="image-uploader">
  <input
    type="file"
    name={name}
    id={name}
    accept="image/*"
    multiple={multiple}
    required={required}
    class="hidden"
  />
  
  <label for={name} class="upload-area">
    <div class="flex flex-col items-center justify-center p-6 border-2 border-dashed border-gray-300 rounded-lg hover:border-primary-500 transition-colors cursor-pointer">
      <svg class="w-8 h-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
      </svg>
      <span class="text-sm text-gray-600">Arraste imagens ou clique para selecionar</span>
      <span class="text-xs text-gray-500 mt-1">PNG, JPG ou WEBP</span>
    </div>
  </label>

  <div id="preview-container" class="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
    <!-- Preview das imagens aqui -->
  </div>
  <input type="hidden" id="removed-images" />
</div>

<script>
  function initImageUploader() {
    const input = document.querySelector('input[type="file"]');
    const previewContainer = document.getElementById('preview-container');
    
    if (!input || !previewContainer) return;
    
    // Verificar se já existem imagens no preview
    if (previewContainer.children.length > 0) {
      // Adicionar botões de remoção para imagens existentes
      Array.from(previewContainer.children).forEach(preview => {
        const removeButton = preview.querySelector('.remove-image');
        if (removeButton) {
          removeButton.onclick = () => preview.remove();
        }
      });
    }
    
    function handleFiles(files) {
      // Não limpar o preview para manter imagens existentes
      
      // Processar cada arquivo
      Array.from(files).forEach((file) => {
        if (!file.type.startsWith('image/')) return;
        
        // Criar preview
        const reader = new FileReader();
        reader.onload = (e) => {
          const preview = document.createElement('div');
          preview.className = 'relative group';
          preview.innerHTML = `
            <img src="${e.target.result}" class="w-full h-32 object-cover rounded-lg" />
            <button type="button" class="remove-image absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          `;
          
          // Adicionar botão de remover
          const removeButton = preview.querySelector('.remove-image');
          removeButton.onclick = () => preview.remove();
          
          previewContainer.appendChild(preview);
        };
        reader.readAsDataURL(file);
      });
    }
    
    // Função para atualizar o input de arquivo com base nas imagens mostradas
    function updateFileInput() {
      // Esta função é um placeholder - não podemos realmente modificar o input file por segurança
      // Mas podemos usar um campo hidden para rastrear quais imagens foram removidas
      const removedImages = document.getElementById('removed-images');
      if (removedImages) {
        const currentImages = previewContainer.querySelectorAll('img');
        removedImages.value = currentImages.length.toString();
      }
    }
    
    // Event Listeners
    input.addEventListener('change', (e) => handleFiles(e.target.files));
    
    // Drag and Drop
    const dropArea = input.parentElement;
    dropArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropArea.classList.add('border-primary-500');
    });
    
    dropArea.addEventListener('dragleave', () => {
      dropArea.classList.remove('border-primary-500');
    });
    
    dropArea.addEventListener('drop', (e) => {
      e.preventDefault();
      dropArea.classList.remove('border-primary-500');
      handleFiles(e.dataTransfer.files);
    });
  }
  
  document.addEventListener('DOMContentLoaded', initImageUploader);
</script>

<style>
.upload-area {
  transition: all 0.2s ease;
}

.upload-area:hover {
  transform: translateY(-1px);
}
</style>

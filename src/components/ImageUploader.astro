---
---

<div class="space-y-4">
  <label class="label">Imagens do produto</label>
  
  <div class="border-dashed border-2 border-gray-300 rounded-lg p-6 text-center" id="upload-container">
    <input
      type="file"
      id="product-images"
      name="images"
      accept="image/*"
      multiple
      class="hidden"
    />
    
    <label for="product-images" class="cursor-pointer flex flex-col items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
      </svg>
      <span class="text-gray-600 font-medium">Clique para selecionar imagens</span>
      <span class="text-gray-500 text-sm mt-1">ou arraste e solte aqui</span>
    </label>
  </div>
  
  <!-- Contêiner para pré-visualização das imagens -->
  <div id="image-preview" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4"></div>
  
  <div class="text-gray-500 text-sm">
    <p>• A primeira imagem será a principal</p>
    <p>• Formatos aceitos: JPG, PNG, WebP</p>
    <p>• Tamanho máximo: 5MB por imagem</p>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const fileInput = document.getElementById('product-images');
    const imagePreview = document.getElementById('image-preview');
    const uploadContainer = document.getElementById('upload-container');
    
    if (!fileInput || !imagePreview || !uploadContainer) {
      console.error('Elementos necessários não encontrados');
      return;
    }
    
    // Função para mostrar pré-visualização
    function showPreview(files) {
      // Limpar pré-visualizações anteriores
      imagePreview.innerHTML = '';
      
      if (files.length === 0) return;
      
      Array.from(files).forEach((file, index) => {
        if (!file.type.match('image.*')) return;
        
        const reader = new FileReader();
        
        reader.onload = (e) => {
          const div = document.createElement('div');
          div.className = 'relative';
          
          // Adicionar classe especial à primeira imagem (principal)
          if (index === 0) {
            div.classList.add('border-2', 'border-blue-500', 'rounded-lg');
          }
          
          div.innerHTML = `
            <img src="${e.target.result}" alt="Pré-visualização" class="w-full h-32 object-cover rounded-lg" />
            <span class="absolute top-1 right-1 bg-white rounded-full p-1 cursor-pointer delete-preview">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </span>
            ${index === 0 ? '<span class="absolute top-1 left-1 bg-blue-500 text-white text-xs px-2 py-1 rounded-full">Principal</span>' : ''}
          `;
          
          imagePreview.appendChild(div);
        };
        
        reader.readAsDataURL(file);
      });
    }
    
    // Evento para seleção de arquivos
    fileInput.addEventListener('change', (e) => {
      showPreview(e.target.files);
    });
    
    // Suporte para arrastar e soltar
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
      }, false);
    });
    
    uploadContainer.addEventListener('dragenter', () => {
      uploadContainer.classList.add('border-blue-500');
    }, false);
    
    uploadContainer.addEventListener('dragleave', () => {
      uploadContainer.classList.remove('border-blue-500');
    }, false);
    
    uploadContainer.addEventListener('drop', (e) => {
      uploadContainer.classList.remove('border-blue-500');
      const dt = e.dataTransfer;
      const files = dt.files;
      fileInput.files = files;
      showPreview(files);
    }, false);
    
    // Remover imagens da pré-visualização
    imagePreview.addEventListener('click', (e) => {
      if (e.target.closest('.delete-preview')) {
        const previewItem = e.target.closest('.relative');
        const index = Array.from(imagePreview.children).indexOf(previewItem);
        
        // Criar uma nova FileList sem o arquivo removido
        const dt = new DataTransfer();
        const files = fileInput.files;
        
        for (let i = 0; i < files.length; i++) {
          if (i !== index) {
            dt.items.add(files[i]);
          }
        }
        
        fileInput.files = dt.files;
        showPreview(fileInput.files);
      }
    });
  });
</script>

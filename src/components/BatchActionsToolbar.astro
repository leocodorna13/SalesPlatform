---
interface Props {
  selectedCount: number;
}

const { selectedCount } = Astro.props;
---

<div id="batch-actions-toolbar" class="fixed bottom-0 left-0 right-0 bg-white shadow-lg border-t border-gray-200 transform transition-transform duration-300 translate-y-full z-50">
  <div class="container mx-auto px-4 py-3">
    <div class="flex items-center justify-between">
      <div class="flex items-center">
        <span class="font-medium text-gray-700 mr-2">{selectedCount} produtos selecionados</span>
        <button id="clear-selection" class="text-sm text-gray-500 hover:text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          Limpar seleção
        </button>
      </div>
      
      <div class="flex flex-wrap gap-2 mb-4">
        <button
          type="button"
          id="selectAllBtn"
          class="btn btn-sm btn-outline"
        >
          Selecionar todos
        </button>
        
        <button
          type="button"
          id="deselectAllBtn"
          class="btn btn-sm btn-outline"
        >
          Desmarcar todos
        </button>
        
        <div class="relative inline-block text-left">
          <button 
            type="button" 
            id="batchActionsDropdown" 
            class="btn btn-sm btn-primary flex items-center"
          >
            Ações em lote
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div id="batchActionsMenu" class="hidden absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
            <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="batchActionsDropdown">
              <button 
                type="button" 
                class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 batch-action" 
                data-action="markSold"
                role="menuitem"
              >
                Marcar como vendidos
              </button>
              <button 
                type="button" 
                class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 batch-action" 
                data-action="markAvailable"
                role="menuitem"
              >
                Marcar como disponíveis
              </button>
              <div class="border-t border-gray-100 my-1"></div>
              <button 
                type="button" 
                class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 batch-action" 
                data-action="markHidden"
                role="menuitem"
              >
                Ocultar produtos
              </button>
              <button 
                type="button" 
                class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 batch-action" 
                data-action="markVisible"
                role="menuitem"
              >
                Mostrar produtos
              </button>
              <div class="border-t border-gray-100 my-1"></div>
              <button 
                type="button" 
                class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 batch-action" 
                data-action="delete"
                role="menuitem"
              >
                Excluir produtos
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .btn-sm {
    @apply py-1 px-3 rounded text-sm font-medium flex items-center;
  }
</style>

<script>
  // Definir o tipo para a janela global
  declare global {
    interface Window {
      updateBatchActionsToolbar: (selectedCount: number) => void;
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const toolbar = document.getElementById('batch-actions-toolbar');
    const clearSelectionBtn = document.getElementById('clear-selection');
    const batchMarkSoldBtn = document.querySelector('.batch-action[data-action="markSold"]');
    const batchMarkAvailableBtn = document.querySelector('.batch-action[data-action="markAvailable"]');
    const batchMarkHiddenBtn = document.querySelector('.batch-action[data-action="markHidden"]');
    const batchMarkVisibleBtn = document.querySelector('.batch-action[data-action="markVisible"]');
    const batchDeleteBtn = document.querySelector('.batch-action[data-action="delete"]');
    
    // Função para mostrar/esconder a barra de ações
    window.updateBatchActionsToolbar = (selectedCount: number) => {
      if (toolbar) {
        if (selectedCount > 0) {
          toolbar.classList.remove('translate-y-full');
        } else {
          toolbar.classList.add('translate-y-full');
        }
      }
    };
    
    // Limpar seleção
    if (clearSelectionBtn) {
      clearSelectionBtn.addEventListener('click', () => {
        document.querySelectorAll('.product-checkbox:checked').forEach(checkbox => {
          (checkbox as HTMLInputElement).checked = false;
        });
        window.updateBatchActionsToolbar(0);
      });
    }
    
    // Função para executar ação em lote
    const executeBatchAction = async (action: string) => {
      const selectedIds = Array.from(document.querySelectorAll('.product-checkbox:checked'))
        .map(checkbox => (checkbox as HTMLInputElement).getAttribute('data-product-id'));
      
      if (selectedIds.length === 0) return;
      
      // Confirmar ação
      let confirmMessage = '';
      switch (action) {
        case 'markSold':
          confirmMessage = `Marcar ${selectedIds.length} produtos como vendidos?`;
          break;
        case 'markAvailable':
          confirmMessage = `Marcar ${selectedIds.length} produtos como disponíveis?`;
          break;
        case 'markHidden':
          confirmMessage = `Ocultar ${selectedIds.length} produtos?`;
          break;
        case 'markVisible':
          confirmMessage = `Tornar ${selectedIds.length} produtos visíveis?`;
          break;
        case 'delete':
          confirmMessage = `Excluir ${selectedIds.length} produtos permanentemente?`;
          break;
      }
      
      if (!confirm(confirmMessage)) return;
      
      // Criar formulário para enviar
      const form = document.createElement('form');
      form.method = 'POST';
      form.style.display = 'none';
      
      const actionInput = document.createElement('input');
      actionInput.name = 'action';
      actionInput.value = `batch-${action}`;
      form.appendChild(actionInput);
      
      selectedIds.forEach(id => {
        if (id) {
          const input = document.createElement('input');
          input.name = 'productIds[]';
          input.value = id;
          form.appendChild(input);
        }
      });
      
      document.body.appendChild(form);
      form.submit();
    };
    
    // Adicionar event listeners para os botões
    if (batchMarkSoldBtn) {
      batchMarkSoldBtn.addEventListener('click', () => executeBatchAction('markSold'));
    }
    
    if (batchMarkAvailableBtn) {
      batchMarkAvailableBtn.addEventListener('click', () => executeBatchAction('markAvailable'));
    }
    
    if (batchMarkHiddenBtn) {
      batchMarkHiddenBtn.addEventListener('click', () => executeBatchAction('markHidden'));
    }
    
    if (batchMarkVisibleBtn) {
      batchMarkVisibleBtn.addEventListener('click', () => executeBatchAction('markVisible'));
    }
    
    if (batchDeleteBtn) {
      batchDeleteBtn.addEventListener('click', () => executeBatchAction('delete'));
    }
    
    // Adicionar evento para abrir/fechar o menu
    const batchActionsDropdown = document.getElementById('batchActionsDropdown');
    const batchActionsMenu = document.getElementById('batchActionsMenu');
    
    if (batchActionsDropdown && batchActionsMenu) {
      batchActionsDropdown.addEventListener('click', () => {
        batchActionsMenu.classList.toggle('hidden');
      });
      
      // Fechar o menu quando clicar fora
      document.addEventListener('click', (event) => {
        const target = event.target as Node;
        if (batchActionsDropdown && batchActionsMenu && 
            !batchActionsDropdown.contains(target) && 
            !batchActionsMenu.contains(target)) {
          batchActionsMenu.classList.add('hidden');
        }
      });
    }
  });
</script>

---
// Componente para solicitar permissão de notificações
---

<div id="notification-container" class="fixed bottom-16 right-4 z-50 transform transition-transform duration-300 translate-y-0 hidden">
  <div class="bg-white rounded-lg shadow-lg p-4 border border-neutral-200 max-w-xs">
    <div class="flex items-start">
      <div class="flex-shrink-0 pt-0.5">
        <i class="fas fa-bell text-accent-500 text-xl"></i>
      </div>
      <div class="ml-3 flex-1">
        <h3 class="text-sm font-medium text-neutral-900">Receba notificações</h3>
        <p class="mt-1 text-sm text-neutral-600">
          Seja notificado quando novos produtos forem adicionados.
        </p>
        <div class="mt-3 flex space-x-2">
          <button 
            id="enable-notifications"
            type="button" 
            class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-accent-500 hover:bg-accent-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-accent-500"
          >
            Ativar notificações
          </button>
          <button 
            id="dismiss-notification"
            type="button" 
            class="inline-flex items-center px-3 py-2 border border-neutral-300 text-sm leading-4 font-medium rounded-md text-neutral-700 bg-white hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Agora não
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Função para esconder o container de notificação
  function hideNotificationContainer() {
    const container = document.getElementById('notification-container');
    if (container) {
      container.classList.add('translate-y-full', 'opacity-0');
      setTimeout(() => {
        container.classList.add('hidden');
      }, 300);
    }
  }

  // Verificar se o Service Worker já está registrado e tem uma inscrição ativa
  async function checkExistingSubscription() {
    if ('serviceWorker' in navigator && 'PushManager' in window) {
      try {
        const registration = await navigator.serviceWorker.ready;
        const subscription = await registration.pushManager.getSubscription();
        return !!subscription;
      } catch (error) {
        console.error('Erro ao verificar assinatura existente:', error);
        return false;
      }
    }
    return false;
  }

  // Detectar se é um dispositivo móvel
  function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  }

  // Mostrar o prompt após um tempo
  document.addEventListener('DOMContentLoaded', async () => {
    const isMobile = isMobileDevice();
    console.log('Dispositivo móvel detectado:', isMobile);

    // Verificar se as notificações já estão habilitadas
    if (Notification.permission === 'granted') {
      const hasSubscription = await checkExistingSubscription();
      console.log('Permissão já concedida, tem assinatura:', hasSubscription);
      if (hasSubscription) {
        return; // Já tem permissão e assinatura, não mostrar o prompt
      }
    }
    
    // Não mostrar o prompt se o usuário já recusou
    if (Notification.permission === 'denied') {
      console.log('Permissão de notificação negada anteriormente');
      return;
    }
    
    // Mostrar o prompt após 3 segundos
    setTimeout(() => {
      const container = document.getElementById('notification-container');
      if (container) {
        console.log('Mostrando container de notificação');
        container.classList.remove('hidden');
      }
    }, 3000);
    
    // Botão de dispensar
    const dismissButton = document.getElementById('dismiss-notification');
    if (dismissButton) {
      // Usar touchstart para dispositivos móveis
      const eventType = isMobile ? 'touchstart' : 'click';
      dismissButton.addEventListener(eventType, (e) => {
        e.preventDefault();
        console.log('Botão dispensar clicado');
        hideNotificationContainer();
      });
    }

    // Botão de habilitar notificações - escutar evento de clique
    const enableButton = document.getElementById('enable-notifications');
    if (enableButton) {
      // Usar touchstart para dispositivos móveis
      const eventType = isMobile ? 'touchstart' : 'click';
      enableButton.addEventListener(eventType, (e) => {
        e.preventDefault();
        console.log('Botão habilitar notificações clicado');
        
        // Adicionar classe de carregamento
        enableButton.classList.add('opacity-75');
        enableButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Ativando...';
        
        // O pwa.js vai lidar com o registro, mas precisamos esconder o container quando concluído
        // Ouvir eventos de alteração de permissão
        const checkPermissionInterval = setInterval(() => {
          if (Notification.permission === 'granted') {
            clearInterval(checkPermissionInterval);
            hideNotificationContainer();
          }
        }, 500);
        
        // Definir um timeout para o intervalo (15 segundos para dispositivos móveis que podem ser mais lentos)
        setTimeout(() => {
          clearInterval(checkPermissionInterval);
          // Se ainda está visível após o timeout, resetar o botão
          if (!document.getElementById('notification-container').classList.contains('hidden')) {
            enableButton.classList.remove('opacity-75');
            enableButton.innerHTML = 'Ativar notificações';
          }
        }, isMobile ? 15000 : 10000);
      });
    }
  });

  // Ouvir o evento personalizado que indica que as notificações foram ativadas
  document.addEventListener('notificationsEnabled', () => {
    console.log('Evento notificationsEnabled recebido, escondendo container');
    hideNotificationContainer();
  });

  // Ouvir mensagens do service worker (para quando a inscrição for concluída)
  navigator.serviceWorker.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'PUSH_SUBSCRIBED') {
      hideNotificationContainer();
    }
  });
</script>

---
/**
 * Componente para filtrar produtos por categoria
 */

interface Props {
  categories: Array<{
    id: string;
    name: string;
    slug: string;
    product_count?: number;
  }>;
  activeCategory?: string;
}

const { categories = [], activeCategory = 'all' } = Astro.props;
---

<div class="category-filter my-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <h3 class="text-lg font-medium text-neutral-800 mb-4">Filtrar por categoria</h3>
    
    <div class="flex flex-wrap gap-2 animate-on-scroll">
      <button 
        data-category="all" 
        data-name="Todos" 
        class={`category-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 flex items-center gap-1.5 ${activeCategory === 'all' ? 'bg-primary-600 text-white shadow-md' : 'bg-neutral-100 text-neutral-700 hover:bg-primary-100 hover:text-primary-700'}`}
      >
        <i class="fas fa-border-all text-xs"></i>
        <span>Todos</span>
      </button>
      
      {categories.map((category) => (
        <button 
          data-category={category.slug} 
          data-name={category.name}
          class={`category-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 flex items-center gap-1.5 ${activeCategory === category.slug ? 'bg-primary-600 text-white shadow-md' : 'bg-neutral-100 text-neutral-700 hover:bg-primary-100 hover:text-primary-700'}`}
        >
          <i class="fas fa-tag text-xs"></i>
          <span>{category.name}</span>
          {category.product_count !== undefined && (
            <span class="ml-1 bg-white bg-opacity-20 text-xs px-1.5 py-0.5 rounded-full">
              {category.product_count}
            </span>
          )}
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const categoryButtons = document.querySelectorAll('.category-btn');
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    
    // Função para disparar evento de mudança de categoria
    function dispatchCategoryEvent(category: string, name: string) {
      const event = new CustomEvent('categoryChanged', {
        detail: { category, name }
      });
      document.dispatchEvent(event);
    }
    
    // Adicionar evento de clique aos botões de categoria
    categoryButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remover classe ativa de todos os botões
        categoryButtons.forEach(btn => {
          btn.classList.remove('bg-primary-600', 'text-white', 'shadow-md');
          btn.classList.add('bg-neutral-100', 'text-neutral-700');
        });
        
        // Adicionar classe ativa ao botão clicado
        button.classList.remove('bg-neutral-100', 'text-neutral-700');
        button.classList.add('bg-primary-600', 'text-white', 'shadow-md');
        
        // Obter categoria e nome
        const category = button.getAttribute('data-category') || 'all';
        const name = button.getAttribute('data-name') || 'Todos';
        
        // Atualizar URL se necessário
        if (window.location.pathname !== '/' && window.location.pathname !== '/index.html') {
          window.location.href = category === 'all' ? '/' : `/categoria/${category}`;
          return;
        }
        
        // Disparar evento de mudança de categoria
        dispatchCategoryEvent(category, name);
        
        // Adicionar efeito de animação ao filtrar
        const productGrid = document.querySelector('.product-grid');
        if (productGrid) {
          productGrid.classList.add('animate-fade');
          setTimeout(() => {
            productGrid.classList.remove('animate-fade');
          }, 500);
        }
      });
    });
    
    // Verificar URL para definir categoria ativa
    const urlPath = window.location.pathname;
    const categoryMatch = urlPath.match(/\/categoria\/([^\/]+)/);
    
    if (categoryMatch && categoryMatch[1]) {
      const categorySlug = categoryMatch[1];
      const categoryButton = document.querySelector(`[data-category="${categorySlug}"]`);
      
      if (categoryButton) {
        // Simular clique no botão da categoria
        categoryButton.dispatchEvent(new Event('click'));
      }
    } else if (urlPath === '/' || urlPath === '/index.html') {
      // Na página inicial, verificar se há parâmetro de categoria na URL
      const urlParams = new URLSearchParams(window.location.search);
      const categoryParam = urlParams.get('category');
      
      if (categoryParam) {
        const categoryButton = document.querySelector(`[data-category="${categoryParam}"]`);
        if (categoryButton) {
          categoryButton.dispatchEvent(new Event('click'));
        }
      }
    }
  });
</script>

<style>
  /* Animação de fade para o grid de produtos */
  @keyframes fade {
    0% { opacity: 0.7; }
    100% { opacity: 1; }
  }
  
  .animate-fade {
    animation: fade 0.5s ease-in-out;
  }
  
  /* Animação para entrada dos elementos */
  .animate-on-scroll > * {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .animate-on-scroll > *.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>
